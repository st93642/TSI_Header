/*****************************************************************************/
/*                                                                           */
/*  test_codebase_rust.txt                               TTTTTTTT SSSSSSS II */
/*                                                          TT    SS      II */
/*  By: st93642@students.tsi.lv                             TT    SSSSSSS II */
/*                                                          TT         SS II */
/*  Created: Sep 25 2025 12:40 Igors Oleinikovs             TT    SSSSSSS II */
/*  Updated: Sep 25 2025 12:40 Igors Oleinikovs                              */
/*                                                                           */
/*   Transport and Telecommunication Institute - Riga, Latvia                */
/*                       https://tsi.lv                                      */
/*****************************************************************************/

//! Basic Rust program

/// Main function - entry point of the program
fn main() {
    println!("Hello, World!");
    println!("This is a basic Rust program.");
}

/// Example function with parameters
fn greet(name: &str) -> String {
    format!("Hello, {}!", name)
}

/// Example struct definition
#[derive(Debug)]
struct Person {
    name: String,
    age: u32,
}

impl Person {
    /// Create a new Person
    fn new(name: String, age: u32) -> Self {
        Person { name, age }
    }

    /// Display person information
    fn display(&self) {
        println!("Name: {}, Age: {}", self.name, self.age);
    }
}

/// Example usage (uncomment to use)
/*
fn main() {
    // Basic greeting
    println!("Hello, World!");
    println!("This is a basic Rust program.");

    // Function usage
    let greeting = greet("TSI Student");
    println!("{}", greeting);

    // Struct usage
    let person = Person::new("TSI Student".to_string(), 20);
    person.display();
    println!("Person: {:?}", person);
}
*/

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_greet() {
        assert_eq!(greet("World"), "Hello, World!");
    }

    #[test]
    fn test_person() {
        let person = Person::new("Test".to_string(), 25);
        assert_eq!(person.name, "Test");
        assert_eq!(person.age, 25);
    }
}
