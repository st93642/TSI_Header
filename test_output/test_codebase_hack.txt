/*****************************************************************************/
/*                                                                           */
/*  test_codebase_hack.txt                               TTTTTTTT SSSSSSS II */
/*                                                          TT    SS      II */
/*  By: st93642@students.tsi.lv                             TT    SSSSSSS II */
/*                                                          TT         SS II */
/*  Created: Sep 28 2025 23:09 st93642                      TT    SSSSSSS II */
/*  Updated: Sep 28 2025 23:09 st93642                                       */
/*                                                                           */
/*   Transport and Telecommunication Institute - Riga, Latvia                */
/*                       https://tsi.lv                                      */
/*****************************************************************************/

<?hh // strict

/**
 * Main Hack program
 * Hack is a programming language created by Facebook that adds static typing to PHP
 */

// Define types and interfaces
interface User {
    public function getName(): string;
    public function getEmail(): string;
}

class UserImpl implements User {
    private string $name;
    private string $email;

    public function __construct(string $name, string $email) {
        $this->name = $name;
        $this->email = $email;
    }

    public function getName(): string {
        return $this->name;
    }

    public function getEmail(): string {
        return $this->email;
    }
}

// Utility functions
namespace HackUtils {

    /**
     * Calculate factorial using recursion
     */
    function factorial(int $n): int {
        if ($n <= 1) {
            return 1;
        }
        return $n * factorial($n - 1);
    }

    /**
     * Generic function to find maximum in array
     */
    function findMax<T as num>(Traversable<T> $items): ?T {
        $max = null;
        foreach ($items as $item) {
            if ($max === null || $item > $max) {
                $max = $item;
            }
        }
        return $max;
    }

    /**
     * Process user data with type safety
     */
    function processUsers(Vector<User> $users): Vector<string> {
        $names = Vector {};
        foreach ($users as $user) {
            $names[] = $user->getName();
        }
        return $names;
    }
}

// Main function - entry point of the program
function main(): void {
    echo "Hello, World!\n";
    echo "This is a basic Hack program.\n";

    // Demonstrate type safety
    $user = new UserImpl("TSI Student", "student@tsi.lv");
    echo "User: " . $user->getName() . " (" . $user->getEmail() . ")\n";

    // Demonstrate collections
    $numbers = Vector {1, 5, 3, 9, 2, 8};
    $maxNumber = HackUtils\findMax($numbers);
    echo "Maximum number: " . $maxNumber . "\n";

    // Demonstrate factorial
    $fact5 = HackUtils\factorial(5);
    echo "5! = " . $fact5 . "\n";

    // Demonstrate async/await (Hack supports async)
    $result = \HH\Asio\join(asyncFunction());
    echo "Async result: " . $result . "\n";
}

// Async function example
async function asyncFunction(): Awaitable<string> {
    // Simulate async operation
    await \HH\Asio\usleep(1000); // Sleep for 1ms
    return "Async operation completed";
}

// Execute main function
main();

// Example of XHP (Hack's JSX-like syntax for XML/HTML)
// Note: XHP requires additional setup and is commented out
/*
class :ui:page extends :x:element {
    protected function render(): :x:frag {
        return
            <html>
                <head><title>Hack XHP Example</title></head>
                <body>
                    <h1>Hello from XHP!</h1>
                    <p>This is Hack's XML/HTML templating system.</p>
                </body>
            </html>;
    }
}
*/

// Type aliases for better code organization
type UserID = int;
type Email = string;
type UserData = shape('id' => UserID, 'email' => Email);

// Example enum (Hack supports enums)
enum UserStatus: int {
    ACTIVE = 1;
    INACTIVE = 2;
    SUSPENDED = 3;
}

// Generic class example
generic class Container<T> {
    private Vector<T> $items;

    public function __construct() {
        $this->items = Vector {};
    }

    public function add(T $item): void {
        $this->items[] = $item;
    }

    public function getAll(): Vector<T> {
        return $this->items;
    }
}

// Demonstrate generic usage
$userContainer = new Container<User>();
$userContainer->add($user);
$allUsers = $userContainer->getAll();

echo "Total users in container: " . count($allUsers) . "\n";
