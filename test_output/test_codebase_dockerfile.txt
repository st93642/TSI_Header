#*****************************************************************************#
#                                                                             #
#  test_codebase_dockerfile.txt                           TTTTTTTT SSSSSSS II #
#                                                            TT    SS      II #
#  By: st93642@students.tsi.lv                               TT    SSSSSSS II #
#                                                            TT         SS II #
#  Created: Sep 29 2025 13:53 st93642                        TT    SSSSSSS II #
#  Updated: Sep 29 2025 13:53 st93642                                         #
#                                                                             #
#   Transport and Telecommunication Institute - Riga, Latvia                  #
#                       https://tsi.lv                                        #
#*****************************************************************************#
# Basic Dockerfile template

# Use official base image
FROM ubuntu:20.04

# Set maintainer label
LABEL maintainer="TSI Student <student@tsi.lv>"
LABEL version="1.0"
LABEL description="TSI Header - Basic Docker Image"

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TSI_VERSION=1.0
ENV APP_HOME=/app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR $APP_HOME

# Copy application files
COPY . $APP_HOME/

# Install application dependencies (example for Node.js)
# RUN npm install

# Create non-root user
RUN useradd -m -s /bin/bash tsiuser && \
    chown -R tsiuser:tsiuser $APP_HOME

# Switch to non-root user
USER tsiuser

# Expose port (if applicable)
# EXPOSE 3000

# Health check (optional)
# HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
#   CMD curl -f http://localhost:3000/health || exit 1

# Default command
CMD ["echo", "Hello, World from TSI Docker container!"]

# Example for different languages:

# For Python applications:
# FROM python:3.9-slim
# COPY requirements.txt .
# RUN pip install -r requirements.txt
# CMD ["python", "app.py"]

# For Node.js applications:
# FROM node:16-alpine
# COPY package*.json ./
# RUN npm ci --only=production
# CMD ["npm", "start"]

# For Java applications:
# FROM openjdk:11-jre-slim
# COPY target/app.jar .
# CMD ["java", "-jar", "app.jar"]