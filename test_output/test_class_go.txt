/*****************************************************************************/
/*                                                                           */
/*  test_class_go.txt                                    TTTTTTTT SSSSSSS II */
/*                                                          TT    SS      II */
/*  By: st93642@students.tsi.lv                             TT    SSSSSSS II */
/*                                                          TT         SS II */
/*  Created: Sep 30 2025 17:57 st93642                      TT    SSSSSSS II */
/*  Updated: Sep 30 2025 17:57 st93642                                       */
/*                                                                           */
/*   Transport and Telecommunication Institute - Riga, Latvia                */
/*                       https://tsi.lv                                      */
/*****************************************************************************/

package main

import (
	"fmt"
)

// TestClass represents a TestClass with basic functionality
type TestClass struct {
	name string
	id   int
}

// NewTestClass creates a new TestClass instance
func NewTestClass(name string, id int) *TestClass {
	return &TestClass{
		name: name,
		id:   id,
	}
}

// NewTestClassWithDefaults creates a TestClass with default values
func NewTestClassWithDefaults() *TestClass {
	return &TestClass{
		name: "",
		id:   0,
	}
}

// GetName returns the name field
func (c *TestClass) GetName() string {
	return c.name
}

// SetName sets the name field
func (c *TestClass) SetName(name string) {
	c.name = name
}

// GetID returns the id field
func (c *TestClass) GetID() int {
	return c.id
}

// SetID sets the id field
func (c *TestClass) SetID(id int) {
	c.id = id
}

// String returns string representation of TestClass
func (c *TestClass) String() string {
	return fmt.Sprintf("TestClass{name=\"%s\", id=%d}", c.name, c.id)
}

// Equals checks equality with another TestClass
func (c *TestClass) Equals(other *TestClass) bool {
	if other == nil {
		return false
	}
	return c.name == other.name && c.id == other.id
}

// Clone creates a copy of the TestClass
func (c *TestClass) Clone() *TestClass {
	return &TestClass{
		name: c.name,
		id:   c.id,
	}
}

// Display prints the TestClass information
func (c *TestClass) Display() {
	fmt.Println(c.String())
}

# Example usage
func main() {
	// Create a new instance
	obj := NewTestClass("Example", 123)
	obj.Display()

	// Test getters and setters
	obj.SetName("Updated Name")
	obj.SetID(456)
	obj.Display()

	// Test clone
	cloned := obj.Clone()
	fmt.Printf("Original equals cloned: %t\n", obj.Equals(cloned))

	// Test with defaults
	defaultObj := NewTestClassWithDefaults()
	defaultObj.Display()
}