/*****************************************************************************/
/*                                                                           */
/*  test_class_swift.txt                                 TTTTTTTT SSSSSSS II */
/*                                                          TT    SS      II */
/*  By: st93642@students.tsi.lv                             TT    SSSSSSS II */
/*                                                          TT         SS II */
/*  Created: Sep 28 2025 23:09 st93642                      TT    SSSSSSS II */
/*  Updated: Sep 28 2025 23:09 st93642                                       */
/*                                                                           */
/*   Transport and Telecommunication Institute - Riga, Latvia                */
/*                       https://tsi.lv                                      */
/*****************************************************************************/

/**
 * TestClass class with basic functionality
 */
class TestClass {
    // Properties
    var name: String
    var id: Int
    
    // Designated initializer
    init(name: String = "", id: Int = 0) {
        self.name = name
        self.id = id
    }
    
    // Convenience initializer
    convenience init(name: String) {
        self.init(name: name, id: 0)
    }
    
    // Getters and setters (Swift properties provide this automatically)
    func getName() -> String {
        return name
    }
    
    func setName(_ name: String) {
        self.name = name
    }
    
    func getId() -> Int {
        return id
    }
    
    func setId(_ id: Int) {
        self.id = id
    }
    
    // CustomStringConvertible protocol implementation
    var description: String {
        return "TestClass{name='\(name)', id=\(id)}"
    }
    
    // Equatable protocol implementation
    static func == (lhs: TestClass, rhs: TestClass) -> Bool {
        return lhs.name == rhs.name && lhs.id == rhs.id
    }
    
    // Hashable protocol implementation
    func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(id)
    }
    
    // Display method
    func display() {
        print(description)
    }
    
    // Clone method
    func clone() -> TestClass {
        return TestClass(name: name, id: id)
    }
    
    // Class method
    class func createDefault() -> TestClass {
        return TestClass(name: "Default", id: 0)
    }
}

# Example usage
// let obj = TestClass(name: "Example", id: 123)
// obj.display()

// Test class method
// let defaultObj = TestClass.createDefault()