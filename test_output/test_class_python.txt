#*****************************************************************************#
#                                                                             #
#  test_class_python.txt                                  TTTTTTTT SSSSSSS II #
#                                                            TT    SS      II #
#  By: st93642@students.tsi.lv                               TT    SSSSSSS II #
#                                                            TT         SS II #
#  Created: Sep 29 2025 10:36 st93642                        TT    SSSSSSS II #
#  Updated: Sep 29 2025 10:36 st93642                                         #
#                                                                             #
#   Transport and Telecommunication Institute - Riga, Latvia                  #
#                       https://tsi.lv                                        #
#*****************************************************************************#

class TestClass:
    """TestClass class with basic functionality."""

    def __init__(self, name="", id_num=0):
        """Initialize TestClass instance.

        Args:
            name (str): The name attribute
            id_num (int): The ID attribute
        """
        self._name = name
        self._id = id_num

    @property
    def name(self):
        """Get the name attribute."""
        return self._name

    @name.setter
    def name(self, value):
        """Set the name attribute."""
        if not isinstance(value, str):
            raise TypeError("Name must be a string")
        self._name = value

    @property
    def id(self):
        """Get the ID attribute."""
        return self._id

    @id.setter
    def id(self, value):
        """Set the ID attribute."""
        if not isinstance(value, int):
            raise TypeError("ID must be an integer")
        self._id = value

    def __str__(self):
        """String representation of the object."""
        return f"TestClass{{name='{self._name}', id={self._id}}}"

    def __repr__(self):
        """Official string representation of the object."""
        return f"TestClass('{self._name}', {self._id})"

    def __eq__(self, other):
        """Check equality with another object."""
        if not isinstance(other, TestClass):
            return NotImplemented
        return self._name == other._name and self._id == other._id

    def __hash__(self):
        """Hash function for the object."""
        return hash((self._name, self._id))

    def display(self):
        """Display the object information."""
        print(f"TestClass{{name='{self._name}', id={self._id}}}")


# Example usage
if __name__ == "__main__":
    # Create an instance
    obj = TestClass("Example", 123)
    obj.display()

    # Test property setters
    obj.name = "Updated Name"
    obj.id = 456
    obj.display()