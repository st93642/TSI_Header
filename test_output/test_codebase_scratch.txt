*******************************************************************************
                                                                               
  test_codebase_scratch.txt                                TTTTTTTT SSSSSSS II 
                                                              TT    SS      II 
  By: st93642@students.tsi.lv                                 TT    SSSSSSS II 
                                                              TT         SS II 
  Created: Sep 29 2025 10:36 st93642                          TT    SSSSSSS II 
  Updated: Sep 29 2025 10:36 st93642                                           
                                                                               
   Transport and Telecommunication Institute - Riga, Latvia                    
                       https://tsi.lv                                          
*******************************************************************************
// Scratch Project - Visual Programming Blocks
// This demonstrates Scratch programming concepts through block representations
// Note: This is a text representation of Scratch blocks for demonstration purposes
// Actual Scratch projects are stored in JSON format (.sb3 files)

// ============================================================================
// SPRITE 1: Main Character (Cat)
// ============================================================================

// When green flag clicked
whenGreenFlagClicked() {
    // Initialize game variables
    setVariable("score", 0);
    setVariable("lives", 3);
    setVariable("level", 1);

    // Position sprite
    goToXY(0, 0);
    setSize(100);
    show();

    // Start main game loop
    forever() {
        checkKeyboardInput();
        checkCollisions();
        updateScore();
    }
}

// Check keyboard input
checkKeyboardInput() {
    if (keyPressed("right arrow")) {
        changeXBy(5);
        setCostume("walking-right");
    }
    if (keyPressed("left arrow")) {
        changeXBy(-5);
        setCostume("walking-left");
    }
    if (keyPressed("up arrow")) {
        changeYBy(5);
    }
    if (keyPressed("space")) {
        playSound("jump");
        changeYBy(10);
    }
}

// Check for collisions
checkCollisions() {
    if (touchingColor("red")) {
        playSound("ouch");
        changeVariable("lives", -1);
        goToXY(0, 0);
    }

    if (touchingSprite("goal")) {
        playSound("cheer");
        changeVariable("score", 10);
        changeVariable("level", 1);
        nextLevel();
    }
}

// Update score display
updateScore() {
    // This would update a score display sprite
}

// ============================================================================
// SPRITE 2: Score Display
// ============================================================================

// When green flag clicked
whenGreenFlagClicked() {
    goToXY(-200, 150);
    setSize(50);

    forever() {
        say("Score: " + getVariable("score") + " Lives: " + getVariable("lives"));
        wait(0.1);
    }
}

// ============================================================================
// SPRITE 3: Enemy
// ============================================================================

// When green flag clicked
whenGreenFlagClicked() {
    goToXY(100, 50);
    setCostume("enemy1");

    forever() {
        move(3);
        if (onEdgeBounce()) {
            turnRight(45);
        }
        wait(0.05);
    }
}

// ============================================================================
// BACKDROP MANAGEMENT
// ============================================================================

// Backdrop 1: Level 1
// Simple colored background with platforms

// Backdrop 2: Level 2
// More complex with obstacles

// ============================================================================
// CUSTOM BLOCKS (FUNCTIONS)
// ============================================================================

// Custom block: nextLevel
define nextLevel() {
    broadcast("level complete");

    if (getVariable("level") == 1) {
        switchBackdrop("level2");
        setVariable("level", 2);
        goToXY(0, 0);
    } else {
        switchBackdrop("victory");
        stopAll();
    }
}

// Custom block: createParticleEffect
define createParticleEffect(color, size, duration) {
    // Create visual particle effects
    setPenColor(color);
    setPenSize(size);

    repeat(duration) {
        penDown();
        move(2);
        turnRight(15);
        penUp();
        wait(0.1);
    }
}

// ============================================================================
// SOUND MANAGEMENT
// ============================================================================

// Sound 1: Background Music
// Loops continuously during gameplay

// Sound 2: Jump Sound
// Plays when character jumps

// Sound 3: Collision Sound
// Plays when hitting obstacles

// ============================================================================
// VARIABLE MANAGEMENT
// ============================================================================

// Global Variables:
// - score: Player's current score
// - lives: Number of lives remaining
// - level: Current game level
// - highScore: Best score achieved

// ============================================================================
// EVENT HANDLING
// ============================================================================

// When backdrop switches to "game over"
whenBackdropSwitchesTo("game over") {
    hide();
    stopAllSounds();
    playSound("game over");
}

// When I receive "level complete"
whenIReceive("level complete") {
    playSound("level up");
    createParticleEffect("yellow", 3, 20);
}

// ============================================================================
// ADVANCED CONCEPTS DEMO
// ============================================================================

// Demonstrate lists
setList("inventory", ["sword", "shield", "potion"]);
setList("scores", [100, 85, 92, 78]);

// Demonstrate cloning
whenIStartAsClone() {
    setEffect("ghost", 50);
    glideTo(random(-200, 200), random(-150, 150), 1);
    deleteThisClone();
}

// Demonstrate broadcasting
broadcast("game start");
broadcastAndWait("pause game");

// Demonstrate sensing
if (mouseDown()) {
    goToMouse();
}

if (loudness() > 50) {
    say("Too loud!");
}

// Demonstrate operators
setVariable("randomNumber", random(1, 100));
setVariable("distance", distanceTo("target"));
setVariable("angle", directionTo("mouse-pointer"));

// ============================================================================
// EDUCATIONAL EXAMPLES
// ============================================================================

// Example 1: Simple Animation
forever() {
    nextCostume();
    wait(0.5);
}

// Example 2: Interactive Story
whenGreenFlagClicked() {
    ask("What's your name?");
    setVariable("playerName", answer());

    say("Hello " + getVariable("playerName") + "! Let's start our adventure!");
    wait(2);

    ask("Choose your path: (1) Forest or (2) Mountain?");
    if (answer() == "1") {
        switchBackdrop("forest");
        say("You enter the mysterious forest...");
    } else {
        switchBackdrop("mountain");
        say("You climb the towering mountain...");
    }
}

// Example 3: Math Game
define mathGame() {
    setVariable("num1", random(1, 10));
    setVariable("num2", random(1, 10));
    setVariable("operation", random(1, 3));

    if (getVariable("operation") == 1) {
        ask(getVariable("num1") + " + " + getVariable("num2") + " = ?");
        if (answer() == (getVariable("num1") + getVariable("num2"))) {
            say("Correct!");
            changeVariable("score", 1);
        } else {
            say("Try again!");
        }
    }
    // Similar logic for subtraction and multiplication
}

// ============================================================================
// TSI SCRATCH PROGRAMMING DEMO COMPLETE
// ============================================================================

// This text representation shows how Scratch blocks would be arranged
// In actual Scratch, these would be visual blocks snapped together
// The concepts demonstrated include:
// - Event handling (when green flag clicked)
// - Loops (forever, repeat)
// - Conditionals (if statements)
// - Variables and lists
// - Sprite management
// - Sound and visual effects
// - Broadcasting between sprites
// - Custom blocks (functions)
// - Sensing and operators
// - Cloning and advanced features