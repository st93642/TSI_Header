/*****************************************************************************/
/*                                                                           */
/*  test_class_scala.txt                                 TTTTTTTT SSSSSSS II */
/*                                                          TT    SS      II */
/*  By: st93642@students.tsi.lv                             TT    SSSSSSS II */
/*                                                          TT         SS II */
/*  Created: Sep 25 2025 18:21 Igors Oleinikovs             TT    SSSSSSS II */
/*  Updated: Sep 25 2025 18:21 Igors Oleinikovs                              */
/*                                                                           */
/*   Transport and Telecommunication Institute - Riga, Latvia                */
/*                       https://tsi.lv                                      */
/*****************************************************************************/

/**
 * TestClass class with basic functionality
 */
class TestClass(var name: String = "", var id: Int = 0) {
  
  // Auxiliary constructor
  def this(name: String) = {
    this(name, 0)
  }
  
  // Copy constructor equivalent
  def copy(name: String = this.name, id: Int = this.id): TestClass = {
    new TestClass(name, id)
  }
  
  // Getters (automatically provided by Scala for var fields)
  def getName: String = name
  def getId: Int = id
  
  // Setters (automatically provided by Scala for var fields)
  def setName(name: String): Unit = {
    this.name = name
  }
  
  def setId(id: Int): Unit = {
    this.id = id
  }
  
  // Override toString method
  override def toString: String = {
    s"TestClass{name=\${name}, id=\${id}}"
  }
  
  // Override equals method
  override def equals(other: Any): Boolean = other match {
    case that: TestClass => name == that.name && id == that.id
    case _ => false
  }
  
  // Override hashCode method
  override def hashCode: Int = {
    val state = Seq(name, id)
    state.map(_.hashCode()).foldLeft(0)((a, b) => 31 * a + b)
  }
  
  // Display method
  def display(): Unit = {
    println(toString)
  }
  
  // Clone method
  def clone(): TestClass = {
    new TestClass(name, id)
  }
  
  // Additional utility methods
  def isEmpty: Boolean = {
    name.isEmpty && id == 0
  }
  
  def reset(): Unit = {
    name = ""
    id = 0
  }
}

// Companion object with factory methods
object TestClass {
  
  // Factory method for creating default instance
  def createDefault(): TestClass = {
    new TestClass("Default", 0)
  }
  
  // Factory method with name only
  def withName(name: String): TestClass = {
    new TestClass(name, 0)
  }
  
  // Apply method for convenient construction
  def apply(name: String = "", id: Int = 0): TestClass = {
    new TestClass(name, id)
  }
}

# Example usage
// object Main extends App {
//   val obj = TestClass("Example", 123)
//   obj.display()
//   
//   // Test companion object methods
//   val defaultObj = TestClass.createDefault()
//   val namedObj = TestClass.withName("Test")
//   
//   println(s"Objects equal: \${obj == defaultObj}")
// }