/*****************************************************************************/
/*                                                                           */
/*  {{FILENAME}}                                     TTTTTTTT SSSSSSS II     */
/*                                                          TT    SS      II */
/*  By: {{USERNAME}}                                       TT    SSSSSSS II */
/*                                                          TT         SS II */
/*  Created: {{DATE}}                                       TT    SSSSSSS II */
/*  Updated: {{DATE}}                                                        */
/*                                                                           */
/*   Transport and Telecommunication Institute - Riga, Latvia                */
/*                       https://tsi.lv                                      */
/*****************************************************************************/

#include "{{HEADER_FILE}}"
#include <iostream>

// Default constructor
{{CLASSNAME}}::{{CLASSNAME}}() : name(""), id(0) {}

// Parameterized constructor
{{CLASSNAME}}::{{CLASSNAME}}(const std::string& name, int id) : name(name), id(id) {}

// Copy constructor
{{CLASSNAME}}::{{CLASSNAME}}(const {{CLASSNAME}}& other) : name(other.name), id(other.id) {}

// Destructor
{{CLASSNAME}}::~{{CLASSNAME}}() {}

// Assignment operator
{{CLASSNAME}}& {{CLASSNAME}}::operator=(const {{CLASSNAME}}& other) {
    if (this != &other) {
        name = other.name;
        id = other.id;
    }
    return *this;
}

// Getters
std::string {{CLASSNAME}}::getName() const {
    return name;
}

int {{CLASSNAME}}::getId() const {
    return id;
}

// Setters
void {{CLASSNAME}}::setName(const std::string& name) {
    this->name = name;
}

void {{CLASSNAME}}::setId(int id) {
    this->id = id;
}

// Utility methods
void {{CLASSNAME}}::display() const {
    std::cout << "{{CLASSNAME}}{name='" << name << "', id=" << id << "}" << std::endl;
}

bool {{CLASSNAME}}::equals(const {{CLASSNAME}}& other) const {
    return name == other.name && id == other.id;
}