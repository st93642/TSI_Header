/**
 * PHP Project Creator
 * Creates PHP-specific project files and structure
 */

const { generateTSIHeaderContent } = require('../headerUtils');

/**
 * Create PHP-specific files
 */
async function createPhpFiles(vscode, projectName, projectUri) {
    await createComposerJson(vscode, projectName, projectUri);
    await createBaseClassPhp(vscode, projectName, projectUri);
}

/**
 * Create composer.json file
 */
async function createComposerJson(vscode, projectName, projectUri) {
    const fileUri = vscode.Uri.joinPath(projectUri, 'composer.json');

    const content = `{
    "name": "${projectName.toLowerCase().replace(/-/g, '_')}",
    "description": "A ${projectName} project created with TSI Header",
    "type": "project",
    "license": "MIT",
    "authors": [
        {
            "name": "TSI Student",
            "email": "student@tsi.lv"
        }
    ],
    "require": {
        "php": ">=8.0"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.5",
        "phpstan/phpstan": "^1.8"
    },
    "autoload": {
        "psr-4": {
            "${projectName}\\\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "${projectName}\\\\Tests\\\\": "tests/"
        }
    },
    "scripts": {
        "test": "phpunit",
        "analyze": "phpstan analyse",
        "start": "php -S localhost:8000 -t public/"
    },
    "config": {
        "optimize-autoloader": true,
        "sort-packages": true
    }
}`;

    const encoder = new TextEncoder();
    await vscode.workspace.fs.writeFile(fileUri, encoder.encode(content));
}

/**
 * Create BaseClass.php file for PHP projects
 */
async function createBaseClassPhp(vscode, projectName, projectUri) {
    const fileUri = vscode.Uri.joinPath(projectUri, 'src', 'BaseClass.php');

    // Generate TSI header
    const headerContent = await generateTSIHeaderContent('BaseClass.php', vscode);

    const content = `${headerContent}

<?php

/**
 * BaseClass - Foundation class for ${projectName}
 *
 * This class provides basic functionality and serves as a base
 * for other classes in the ${projectName} project.
 *
 * Features:
 * - Basic object initialization
 * - String-based naming system
 * - Unique ID generation
 * - Display functionality
 * - JSON serialization support
 */

namespace ${projectName};

class BaseClass
{
    /** @var string Object name */
    protected $name;

    /** @var int Object ID */
    protected $id;

    /** @var \\DateTime Creation timestamp */
    protected $createdAt;

    /** @var int Next available ID */
    private static $nextId = 1;

    /**
     * Constructor - Initialize BaseClass object
     *
     * @param string $name Name for this object
     * @param int|null $id Optional specific ID, auto-generated if not provided
     */
    public function __construct(string $name = "DefaultObject", ?int $id = null)
    {
        $this->name = $name ?: "UnnamedObject";
        $this->id = $id ?? self::$nextId++;
        $this->createdAt = new \\DateTime();
        $this->initialize();
    }

    /**
     * Initialize common object properties
     */
    protected function initialize(): void
    {
        // Override in subclasses for custom initialization
    }

    /**
     * Get the object name
     *
     * @return string Object name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Set the object name
     *
     * @param string $name New object name
     */
    public function setName(string $name): void
    {
        if (!empty($name)) {
            $this->name = $name;
        }
    }

    /**
     * Get the object ID
     *
     * @return int Object ID
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Get the next available ID
     *
     * @return int Next available ID
     */
    public static function getNextId(): int
    {
        return self::$nextId;
    }

    /**
     * Display object information
     */
    public function display(): void
    {
        echo "BaseClass Object:" . PHP_EOL;
        echo "  Name: {$this->name}" . PHP_EOL;
        echo "  ID: {$this->id}" . PHP_EOL;
        echo "  Created: " . $this->createdAt->format('Y-m-d H:i:s') . PHP_EOL;
    }

    /**
     * Convert object to array for serialization
     *
     * @return array Object data as array
     */
    public function toArray(): array
    {
        return [
            'name' => $this->name,
            'id' => $this->id,
            'class' => static::class,
            'created_at' => $this->createdAt->format('c')
        ];
    }

    /**
     * Convert object to JSON string
     *
     * @return string JSON representation
     */
    public function toJson(): string
    {
        return json_encode($this->toArray(), JSON_PRETTY_PRINT);
    }

    /**
     * Create object from array
     *
     * @param array $data Object data
     * @return static New object instance
     */
    public static function fromArray(array $data): self
    {
        return new static(
            $data['name'] ?? 'DefaultObject',
            $data['id'] ?? null
        );
    }

    /**
     * Create object from JSON string
     *
     * @param string $json JSON string
     * @return static New object instance
     */
    public static function fromJson(string $json): self
    {
        $data = json_decode($json, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \\InvalidArgumentException('Invalid JSON provided');
        }
        return self::fromArray($data);
    }

    /**
     * String representation of the object
     *
     * @return string String representation
     */
    public function __toString(): string
    {
        return static::class . "(name=\"{$this->name}\", id={$this->id})";
    }

    /**
     * Check equality with another object
     *
     * @param mixed $other Object to compare
     * @return bool True if equal
     */
    public function equals($other): bool
    {
        if (!$other instanceof self) {
            return false;
        }
        return $this->name === $other->name && $this->id === $other->id;
    }

    /**
     * Magic getter for properties
     *
     * @param string $property Property name
     * @return mixed Property value
     */
    public function __get(string $property)
    {
        if (property_exists($this, $property)) {
            return $this->$property;
        }
        throw new \\InvalidArgumentException("Property '{$property}' does not exist");
    }

    /**
     * Magic setter for properties
     *
     * @param string $property Property name
     * @param mixed $value Property value
     */
    public function __set(string $property, $value): void
    {
        if (property_exists($this, $property)) {
            $this->$property = $value;
        } else {
            throw new \\InvalidArgumentException("Property '{$property}' does not exist");
        }
    }
}

// Example usage
if (basename(__FILE__) === basename($_SERVER['SCRIPT_NAME'])) {
    // Create some example objects
    $obj1 = new BaseClass("Example Object 1");
    $obj2 = new BaseClass("Example Object 2");

    echo "Created objects:" . PHP_EOL;
    $obj1->display();
    echo PHP_EOL;
    $obj2->display();
    echo PHP_EOL;

    echo "JSON representation:" . PHP_EOL;
    echo $obj1->toJson() . PHP_EOL;
    echo PHP_EOL;

    echo "String representations:" . PHP_EOL;
    echo "str(): " . (string)$obj1 . PHP_EOL;
    echo "print_r():" . PHP_EOL;
    print_r($obj1->toArray());
}

?>`;

module.exports = {
    createPhpFiles
};
