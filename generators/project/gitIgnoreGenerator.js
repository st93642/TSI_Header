/**
 * Git Ignore Generator
 * Creates .gitignore files optimized for programming languages
 */

let vscode;
try {
    vscode = require('vscode');
} catch (e) {
    // vscode not available (running outside VS Code)
    vscode = null;
}

/**
 * Create .gitignore file for the project
 */
async function createGitIgnoreFile(language, projectUri) {
    if (!vscode) {
        throw new Error('VS Code API not available');
    }

    const gitignoreContent = generateGitIgnoreContent(language);
    const gitignoreUri = vscode.Uri.joinPath(projectUri, '.gitignore');
    
    const encoder = new TextEncoder();
    await vscode.workspace.fs.writeFile(gitignoreUri, encoder.encode(gitignoreContent));
}

/**
 * Generate .gitignore content based on language
 */
function generateGitIgnoreContent(language) {
    const commonPatterns = [
        '# TSI Header Extension Generated .gitignore',
        '# Transport and Telecommunication Institute',
        '',
        '# IDE and Editor files',
        '.vscode/settings.json',
        '.vscode/launch.json',
        '.idea/',
        '*.swp',
        '*.swo',
        '*.tmp',
        '*.temp',
        '',
        '# OS generated files',
        '.DS_Store',
        '.DS_Store?',
        '._*',
        '.Spotlight-V100',
        '.Trashes',
        'ehthumbs.db',
        'Thumbs.db',
        '',
        '# Debug files',
        'debug_*',
        '*.log',
        '*.out',
        '',
        '# Temporary files',
        '*.bak',
        '*.orig',
        '*.rej'
    ];

    if (language === 'c' || language === 'cpp') {
        return generateCGitIgnore(commonPatterns);
    } else if (language === 'python') {
        return generatePythonGitIgnore(commonPatterns);
    } else if (language === 'java') {
        return generateJavaGitIgnore(commonPatterns);
    } else if (language === 'rust') {
        return generateRustGitIgnore(commonPatterns);
    } else if (language === 'ruby') {
        return generateRubyGitIgnore(commonPatterns);
    }
    
    return commonPatterns.join('\n');
}

/**
 * Generate C/C++ specific .gitignore
 */
function generateCGitIgnore(commonPatterns) {
    const cPatterns = [
        '',
        '# C/C++ specific',
        '# Build artifacts',
        'build/',
        'bin/',
        'obj/',
        '*.o',
        '*.obj',
        '*.exe',
        '*.dll',
        '*.so',
        '*.dylib',
        '*.a',
        '*.lib',
        '',
        '# Compiler intermediate files',
        '*.i',
        '*.s',
        '*.bc',
        '*.ll',
        '',
        '# Debug symbols',
        '*.dSYM/',
        '*.pdb',
        '',
        '# IDE specific',
        '*.cbp',
        '*.depend',
        '*.layout',
        '',
        '# Makefiles',
        'Makefile.backup',
        '',
        '# Autotools',
        'autom4te.cache/',
        'config.log',
        'config.status',
        'configure',
        'Makefile.in',
        '',
        '# CMake',
        'CMakeCache.txt',
        'CMakeFiles/',
        'cmake_install.cmake',
        'install_manifest.txt',
        'compile_commands.json',
        'CTestTestfile.cmake',
        '_deps/',
        '',
        '# Qt',
        '*.pro.user',
        '*.pro.user.*',
        '*.qbs.user',
        '*.qbs.user.*',
        '*.moc',
        'moc_*.cpp',
        'moc_*.h',
        'qrc_*.cpp',
        'ui_*.h',
        'Makefile*',
        '*build-*',
        '',
        '# Visual Studio Code',
        '.vscode/c_cpp_properties.json',
        '.vscode/launch.json',
        '.vscode/tasks.json'
    ];

    return [...commonPatterns, ...cPatterns].join('\n');
}

/**
 * Generate Python specific .gitignore
 */
function generatePythonGitIgnore(commonPatterns) {
    const pythonPatterns = [
        '',
        '# Python specific',
        '# Byte-compiled / optimized / DLL files',
        '__pycache__/',
        '*.py[cod]',
        '*$py.class',
        '',
        '# C extensions',
        '*.so',
        '',
        '# Distribution / packaging',
        '.Python',
        'build/',
        'develop-eggs/',
        'dist/',
        'downloads/',
        'eggs/',
        '*.egg-info/',
        '.installed.cfg',
        'lib/',
        'lib64/',
        'parts/',
        'sdist/',
        'var/',
        'wheels/',
        'pip-wheel-metadata/',
        'share/python-wheels/',
        '*.egg',
        'MANIFEST',
        '',
        '# PyInstaller',
        '*.manifest',
        '*.spec',
        '',
        '# Installer logs',
        'pip-log.txt',
        'pip-delete-this-directory.txt',
        '',
        '# Unit test / coverage reports',
        'htmlcov/',
        '.tox/',
        '.nox/',
        '.coverage',
        '.coverage.*',
        '.cache',
        'nosetests.xml',
        'coverage.xml',
        '*.cover',
        '*.py,cover',
        '.hypothesis/',
        '.pytest_cache/',
        '',
        '# Translations',
        '*.mo',
        '*.pot',
        '',
        '# Django stuff:',
        '*.log',
        'local_settings.py',
        'db.sqlite3',
        'db.sqlite3-journal',
        '',
        '# Flask stuff:',
        'instance/',
        '.webassets-cache',
        '',
        '# Scrapy stuff:',
        '.scrapy',
        '',
        '# Sphinx documentation',
        'docs/_build/',
        '',
        '# PyBuilder',
        'target/',
        '',
        '# Jupyter Notebook',
        '.ipynb_checkpoints',
        '',
        '# IPython',
        'profile_default/',
        'ipython_config.py',
        '',
        '# pyenv',
        '.python-version',
        '',
        '# pipenv',
        'Pipfile.lock',
        '',
        '# PEP 582; used by e.g. github.com/David-OConnor/pyflow',
        '__pypackages__/',
        '',
        '# Celery stuff',
        'celerybeat-schedule',
        'celerybeat.pid',
        '',
        '# SageMath parsed files',
        '*.sage.py',
        '',
        '# Environments',
        '.env',
        '.venv',
        'env/',
        'venv/',
        'ENV/',
        'env.bak/',
        'venv.bak/',
        '',
        '# Spyder project settings',
        '.spyderproject',
        '.spyproject',
        '',
        '# Rope project settings',
        '.ropeproject',
        '',
        '# mkdocs documentation',
        '/site',
        '',
        '# mypy',
        '.mypy_cache/',
        '.dmypy.json',
        'dmypy.json',
        '',
        '# Pyre type checker',
        '.pyre/',
        '',
        '# Virtual environments',
        '.venv/',
        'venv/',
        'ENV/',
        '',
        '# IDE specific',
        '.vscode/settings.json',
        '.vscode/launch.json',
        '.vscode/tasks.json'
    ];

    return [...commonPatterns, ...pythonPatterns].join('\n');
}

/**
 * Generate Java specific .gitignore
 */
function generateJavaGitIgnore(commonPatterns) {
    const javaPatterns = [
        '',
        '# Java specific',
        '# Compiled class files',
        '*.class',
        '*.jar',
        '*.war',
        '*.ear',
        '*.nar',
        '',
        '# Maven',
        'target/',
        'pom.xml.tag',
        'pom.xml.releaseBackup',
        'pom.xml.versionsBackup',
        'pom.xml.next',
        'release.properties',
        'dependency-reduced-pom.xml',
        'buildNumber.properties',
        '.flattened-pom.xml',
        '',
        '# Gradle',
        '.gradle/',
        'build/',
        'gradle-app.setting',
        '!gradle-wrapper.jar',
        '!gradle-wrapper.properties',
        'gradlew',
        'gradlew.bat',
        '',
        '# Eclipse',
        '.metadata',
        'bin/',
        'tmp/',
        '*.tmp',
        '*.bak',
        '*.swp',
        '*~.nib',
        'local.properties',
        '.settings/',
        '.loadpath',
        '.recommenders',
        '',
        '# IntelliJ IDEA',
        '.idea/',
        '*.iws',
        '*.iml',
        '*.ipr',
        'out/',
        '',
        '# NetBeans',
        'nbproject/private/',
        'nbbuild/',
        'dist/',
        'nbdist/',
        '.nb-gradle/',
        '',
        '# VS Code',
        '.vscode/',
        '!gradle/wrapper/gradle-wrapper.jar',
        '',
        '# OS specific',
        '.DS_Store',
        'Thumbs.db',
        '',
        '# Log files',
        '*.log',
        'logs/',
        '',
        '# Runtime data',
        'pids/',
        '*.pid',
        '*.seed',
        '*.pid.lock',
        '',
        '# Coverage directory used by tools like istanbul',
        'coverage/',
        '*.lcov',
        '',
        '# nyc test coverage',
        '.nyc_output',
        '',
        '# Dependency directories',
        'node_modules/',
        'jspm_packages/',
        '',
        '# Optional npm cache directory',
        '.npm',
        '',
        '# Optional REPL history',
        '.node_repl_history',
        '',
        '# Output of \'npm pack\'',
        '*.tgz',
        '',
        '# Yarn Integrity file',
        '.yarn-integrity',
        '',
        '# parcel-bundler cache (https://parceljs.org/)',
        '.cache',
        '.parcel-cache',
        '',
        '# next.js build output',
        '.next',
        '',
        '# nuxt.js build output',
        '.nuxt',
        '',
        '# vuepress build output',
        '.vuepress/dist',
        '',
        '# Serverless directories',
        '.serverless/',
        '',
        '# FuseBox cache',
        '.fusebox/',
        '',
        '# DynamoDB Local files',
        '.dynamodb/',
        '',
        '# TernJS port file',
        '.tern-port',
        '',
        '# Stores VSCode versions used for testing VSCode extensions',
        '.vscode-test',
        '',
        '# Temporary folders',
        'tmp/',
        'temp/',
        '',
        '# Java specific IDE files',
        '.classpath',
        '.project',
        '.factorypath',
        '.springBeans',
        '.sts4-cache',
        '',
        '# Java build artifacts',
        '*.jar',
        '*.war',
        '*.ear',
        '*.class',
        '',
        '# Maven wrapper',
        '.mvn/wrapper/maven-wrapper.jar',
        '',
        '# Gradle wrapper',
        '!gradle-wrapper.jar',
        '!gradle-wrapper.properties'
    ];

    return [...commonPatterns, ...javaPatterns].join('\n');
}

/**
 * Generate Rust specific .gitignore
 */
function generateRustGitIgnore(commonPatterns) {
    const rustPatterns = [
        '',
        '# Rust specific',
        '# Generated by Cargo',
        '# will have compiled files and executables',
        'debug/',
        'target/',
        '',
        '# Remove the # to ignore the `target` directory entirely',
        '# target/',
        '',
        '# These are backup files generated by rustfmt',
        '**/*.rs.bk',
        '',
        '# MSVC Windows builds of rustc generate these, which store debugging information',
        '*.pdb',
        '',
        '# Rustfmt',
        'rustfmt.toml',
        '',
        '# Clippy',
        'clippy.toml',
        '',
        '# Cargo.lock is updated automatically, but should be committed for applications',
        '# Uncomment the next line if you are developing a library',
        '# Cargo.lock',
        '',
        '# Temporary files created by Cargo',
        'Cargo.lock.bak',
        '',
        '# IntelliJ IDEA',
        '.idea/',
        '*.iws',
        '*.iml',
        '*.ipr',
        'out/',
        '',
        '# VS Code',
        '.vscode/settings.json',
        '.vscode/launch.json',
        '.vscode/tasks.json',
        '',
        '# macOS',
        '.DS_Store',
        '',
        '# Windows',
        'Thumbs.db',
        '*.stackdump',
        '',
        '# Linux',
        'core',
        '',
        '# Coverage reports',
        'coverage/',
        '*.profraw',
        '',
        '# Benchmark results',
        'criterion/',
        '',
        '# Development environment',
        '.env',
        '.env.local',
        '',
        '# Build artifacts',
        '*.rlib',
        '*.rmeta',
        '*.d',
        '',
        '# Documentation',
        'book/',
        'docs/book/',
        '',
        '# Backup files',
        '*.orig',
        '*.bak',
        '*.old',
        '',
        '# Rust-specific IDE files',
        '.rusty-tags',
        'tags',
        '',
        '# Cargo registry cache',
        '.cargo/registry/',
        '',
        '# Cargo git dependencies',
        '.cargo/git/',
        '',
        '# Cargo build artifacts',
        '.cargo/config',
        '',
        '# WASM specific',
        '*.wasm',
        '*.wat',
        '',
        '# Benchmark artifacts',
        'target/criterion/',
        '',
        '# Test coverage',
        'target/coverage/',
        'target/debug/',
        'target/release/',
        '',
        '# Development tools',
        '.pre-commit-config.yaml',
        'pre-commit.log',
        '',
        '# CI/CD',
        '.github/workflows/*.yml.bak',
        '',
        '# Local development',
        'local/',
        'tmp/',
        'temp/'
    ];

    return [...commonPatterns, ...rustPatterns].join('\n');
}

/**
 * Generate Ruby specific .gitignore
 */
function generateRubyGitIgnore(commonPatterns) {
    const rubyPatterns = [
        '',
        '# Ruby specific',
        '# Bundler',
        '.bundle/',
        'vendor/bundle/',
        '',
        '# RubyGems',
        '.gem',
        'gemfiles/',
        '',
        '# RVM and rbenv',
        '.rvmrc',
        '.rbenv-version',
        '.ruby-version',
        '',
        '# Rails',
        'config/database.yml',
        'config/secrets.yml',
        'config/application.yml',
        '',
        '# Temporary files',
        '*.swp',
        '*.swo',
        '*~',
        '',
        '# Coverage reports',
        'coverage/',
        '*.lcov',
        '',
        '# RSpec',
        '.rspec',
        'spec/examples.txt',
        '',
        '# YARD documentation',
        '.yardoc/',
        'doc/',
        '',
        '# RuboCop',
        '.rubocop.yml',
        '.rubocop-https---',
        '',
        '# Solargraph',
        '.solargraph.yml',
        '',
        '# Gem packaging',
        '.gem',
        'pkg/',
        '',
        '# IDE and editor files',
        '.vscode/',
        '.idea/',
        '*.sublime-project',
        '*.sublime-workspace',
        '',
        '# OS specific',
        '.DS_Store',
        'Thumbs.db',
        '',
        '# Log files',
        '*.log',
        'log/',
        '',
        '# Runtime data',
        'pids/',
        '*.pid',
        '*.seed',
        '*.pid.lock',
        '',
        '# Directory for instrumented libs generated by jscoverage/JSCover',
        'lib-cov',
        '',
        '# Grunt intermediate storage',
        '.grunt',
        '',
        '# Bower dependency directory',
        'bower_components',
        '',
        '# node-waf configuration',
        '.lock-wscript',
        '',
        '# Compiled binary addons',
        'build/Release',
        '',
        '# Dependency directories',
        'node_modules/',
        'jspm_packages/',
        '',
        '# Optional npm cache directory',
        '.npm',
        '',
        '# Optional REPL history',
        '.node_repl_history',
        '',
        '# Output of \'npm pack\'',
        '*.tgz',
        '',
        '# Yarn Integrity file',
        '.yarn-integrity',
        '',
        '# dotenv environment variables file',
        '.env',
        '.env.test',
        '.env.production',
        '',
        '# parcel-bundler cache',
        '.cache',
        '.parcel-cache',
        '',
        '# next.js build output',
        '.next',
        '',
        '# nuxt.js build output',
        '.nuxt',
        '',
        '# vuepress build output',
        '.vuepress/dist',
        '',
        '# Serverless directories',
        '.serverless/',
        '',
        '# FuseBox cache',
        '.fusebox/',
        '',
        '# DynamoDB Local files',
        '.dynamodb/',
        '',
        '# TernJS port file',
        '.tern-port',
        '',
        '# Stores VSCode versions used for testing VSCode extensions',
        '.vscode-test',
        '',
        '# Temporary folders',
        'tmp/',
        'temp/',
        '',
        '# Backup files',
        '*.orig',
        '*.bak',
        '*.old',
        '',
        '# RubyMine',
        '.idea/',
        '',
        '# Zeus',
        '.zeus.sock',
        '',
        '# Spring',
        'spring.rb',
        '',
        '# Byebug',
        '.byebug_history',
        '',
        '# Ruby server',
        'server.pid',
        '',
        '# Local development',
        'local/',
        'tmp/',
        'temp/'
    ];

    return [...commonPatterns, ...rubyPatterns].join('\n');
}

module.exports = {
    createGitIgnoreFile
};