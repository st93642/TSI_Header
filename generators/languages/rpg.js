/**
 * Generates RPG (Report Program Generator) code base
 * RPG is an IBM programming language used on IBM i systems
 */
function generateRpgCodeBase() {
    return `\n// Basic RPG program (RPG IV Free-form)\n// Note: RPG is IBM's Report Program Generator used on IBM i systems\n\n// Control specifications\nctl-opt main(main);\n\n// Main procedure\ndcl-proc main;\n  dcl-pi *n;\n  end-pi;\n\n  // Display messages\n  dsply 'Hello, World!';\n  dsply 'This is a basic RPG program.';\n\n  // Example with variables\n  dcl-s message varchar(50) inz('Welcome to TSI!');\n  dsply message;\n\n  return;\nend-proc;\n\n// Alternative traditional fixed-format RPG (commented)\n//      * Basic RPG program (Traditional fixed-format)\n//      *\n//     H MAIN(main)\n//      *\n//     D message         S             50A   INZ('Hello, World!')\n//     D program         S             50A   INZ('This is a basic RPG program.')\n//      *\n//     C                   DSPLY                     message\n//     C                   DSPLY                     program\n//     C                   SETON                                        LR\n//      *\n//      * Example subroutine\n//     C     *ENTRY        PLIST\n//     C                   PARM                    input           50\n//     C                   DSPLY                   input\n//     C                   SETON                                        RT\n\n// Example with data structures\n// dcl-ds person qualified;\n//   name varchar(50);\n//   age packed(3:0);\n//   department varchar(20);\n// end-ds;\n\n// Example procedure with parameters\n// dcl-proc greetUser;\n//   dcl-pi *n;\n//     userName varchar(50) const;\n//   end-pi;\n\n//   dcl-s greeting varchar(100);\n\n//   greeting = 'Hello, ' + %trim(userName) + '! Welcome to TSI.';\n//   dsply greeting;\n\n//   return;\n// end-proc;\n\n// Example with file operations\n// dcl-f customer disk usage(*input);\n// dcl-ds customerRec likerec(customerR);\n\n// Example SQLRPGLE (embedded SQL)\n// exec-sql\n//   select count(*) into :recordCount\n//   from customer\n//   where status = 'ACTIVE';\n// end-exec;\n\n// dsply ('Active customers: ' + %char(recordCount));\n\n// Example with indicators and conditional logic\n// dcl-s errorFound ind;\n// dcl-s recordCount packed(5:0);\n\n// exec-sql\n//   select count(*) into :recordCount\n//   from customer\n//   where status = 'ACTIVE';\n// end-exec;\n\n// if sqlcod < 0;\n//   errorFound = *on;\n//   dsply 'Database error occurred';\n// else;\n//   dsply ('Active customers: ' + %char(recordCount));\n// endif;\n\n// Example with arrays\n// dcl-s departments varchar(20) dim(5);\n// dcl-s i packed(2:0);\n\n// departments(1) = 'IT';\n// departments(2) = 'HR';\n// departments(3) = 'FINANCE';\n// departments(4) = 'SALES';\n// departments(5) = 'MARKETING';\n\n// for i = 1 to %elem(departments);\n//   dsply ('Department: ' + departments(i));\n// endfor;\n\n// Example with subprocedures\n// dcl-proc calculateTotal;\n//   dcl-pi *n packed(9:2);\n//     quantity packed(5:0) const;\n//     price packed(7:2) const;\n//   end-pi;\n\n//   dcl-s total packed(9:2);\n\n//   total = quantity * price;\n//   return total;\n// end-proc;\n\n// Example usage\n// dcl-s orderTotal packed(9:2);\n// orderTotal = calculateTotal(5: 29.99);\n// dsply ('Order total: $' + %char(orderTotal));\n\n// Example with date operations\n// dcl-s currentDate date inz(*sys);\n// dcl-s formattedDate varchar(10);\n\n// formattedDate = %char(currentDate: *usa);\n// dsply ('Current date: ' + formattedDate);\n\n// Example with error handling\n// monitor;\n//   // Code that might fail\n//   exec-sql\n//     update customer set status = 'INACTIVE'\n//     where customer_id = :custId;\n//   end-exec;\n// on-error;\n//   dsply 'Error updating customer record';\n// endmon;\n\n// Example with constants\n// dcl-c MAX_RECORDS 1000;\n// dcl-c COMPANY_NAME 'Transport and Telecommunication Institute';\n// dcl-c VERSION '1.0';\n\n// dsply (COMPANY_NAME + ' - Version ' + VERSION);\n\n// Example with prototypes (external procedure calls)\n// dcl-pr getCustomerInfo extpgm('CUSTINFO');\n//   customerId packed(7:0) const;\n//   customerName varchar(50);\n//   customerStatus varchar(10);\n// end-pr;\n\n// Example call\n// dcl-s custName varchar(50);\n// dcl-s custStatus varchar(10);\n// getCustomerInfo(12345: custName: custStatus);\n// dsply ('Customer: ' + custName + ' Status: ' + custStatus);\n`;
}

module.exports = {
    generateRpgCodeBase
};