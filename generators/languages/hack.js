/**
 * Hack Language Code Base Generator
 * Generates Hack code base/boilerplate code
 */

/**
 * Generates Hack code base
 * @returns {string} Hack code base template
 */
function generateHackCodeBase() {
    return `\n<?hh // strict\n\n/**\n * Main Hack program\n * Hack is a programming language created by Facebook that adds static typing to PHP\n */\n\n// Define types and interfaces\ninterface User {\n    public function getName(): string;\n    public function getEmail(): string;\n}\n\nclass UserImpl implements User {\n    private string $name;\n    private string $email;\n\n    public function __construct(string $name, string $email) {\n        $this->name = $name;\n        $this->email = $email;\n    }\n\n    public function getName(): string {\n        return $this->name;\n    }\n\n    public function getEmail(): string {\n        return $this->email;\n    }\n}\n\n// Utility functions\nnamespace HackUtils {\n\n    /**\n     * Calculate factorial using recursion\n     */\n    function factorial(int $n): int {\n        if ($n <= 1) {\n            return 1;\n        }\n        return $n * factorial($n - 1);\n    }\n\n    /**\n     * Generic function to find maximum in array\n     */\n    function findMax<T as num>(Traversable<T> $items): ?T {\n        $max = null;\n        foreach ($items as $item) {\n            if ($max === null || $item > $max) {\n                $max = $item;\n            }\n        }\n        return $max;\n    }\n\n    /**\n     * Process user data with type safety\n     */\n    function processUsers(Vector<User> $users): Vector<string> {\n        $names = Vector {};\n        foreach ($users as $user) {\n            $names[] = $user->getName();\n        }\n        return $names;\n    }\n}\n\n// Main function - entry point of the program\nfunction main(): void {\n    echo "Hello, World!\\n";\n    echo "This is a basic Hack program.\\n";\n\n    // Demonstrate type safety\n    $user = new UserImpl("TSI Student", "student@tsi.lv");\n    echo "User: " . $user->getName() . " (" . $user->getEmail() . ")\\n";\n\n    // Demonstrate collections\n    $numbers = Vector {1, 5, 3, 9, 2, 8};\n    $maxNumber = HackUtils\\findMax($numbers);\n    echo "Maximum number: " . $maxNumber . "\\n";\n\n    // Demonstrate factorial\n    $fact5 = HackUtils\\factorial(5);\n    echo "5! = " . $fact5 . "\\n";\n\n    // Demonstrate async/await (Hack supports async)\n    $result = \\HH\\Asio\\join(asyncFunction());\n    echo "Async result: " . $result . "\\n";\n}\n\n// Async function example\nasync function asyncFunction(): Awaitable<string> {\n    // Simulate async operation\n    await \\HH\\Asio\\usleep(1000); // Sleep for 1ms\n    return "Async operation completed";\n}\n\n// Execute main function\nmain();\n\n// Example of XHP (Hack's JSX-like syntax for XML/HTML)\n// Note: XHP requires additional setup and is commented out\n/*\nclass :ui:page extends :x:element {\n    protected function render(): :x:frag {\n        return\n            <html>\n                <head><title>Hack XHP Example</title></head>\n                <body>\n                    <h1>Hello from XHP!</h1>\n                    <p>This is Hack's XML/HTML templating system.</p>\n                </body>\n            </html>;\n    }\n}\n*/\n\n// Type aliases for better code organization\ntype UserID = int;\ntype Email = string;\ntype UserData = shape('id' => UserID, 'email' => Email);\n\n// Example enum (Hack supports enums)\nenum UserStatus: int {\n    ACTIVE = 1;\n    INACTIVE = 2;\n    SUSPENDED = 3;\n}\n\n// Generic class example\ngeneric class Container<T> {\n    private Vector<T> $items;\n\n    public function __construct() {\n        $this->items = Vector {};\n    }\n\n    public function add(T $item): void {\n        $this->items[] = $item;\n    }\n\n    public function getAll(): Vector<T> {\n        return $this->items;\n    }\n}\n\n// Demonstrate generic usage\n$userContainer = new Container<User>();\n$userContainer->add($user);\n$allUsers = $userContainer->getAll();\n\necho "Total users in container: " . count($allUsers) . "\\n";\n`;
}

module.exports = {
    generateHackCodeBase
};