{
  "language": "C++",
  "version": "0.1.0",
  "description": "Guided C++ curriculum designed for hands-on practice inside VS Code.",
  "estimatedHours": 75,
  "modules": [
    {
      "id": "getting_started",
      "title": "Module 1: Getting Started",
      "description": "Set up your toolchain and write your first C++ programs.",
      "lessons": [
        {
          "id": "hello_world_cpp",
          "title": "Lesson 1.1: Building Hello World",
          "duration": 25,
          "difficulty": "beginner"
        },
        {
          "id": "iostream_basics",
          "title": "Lesson 1.2: Console Input and Output",
          "duration": 30,
          "difficulty": "beginner"
        }
      ]
    },
    {
      "id": "variables_and_data",
      "title": "Module 2: Variables and Data",
      "description": "Understand types, variables, and arithmetic in modern C++.",
      "lessons": [
        {
          "id": "variables_types_cpp",
          "title": "Lesson 2.1: Variables, Types, and Initialization",
          "duration": 45,
          "difficulty": "beginner"
        },
        {
          "id": "arithmetic_input_cpp",
          "title": "Lesson 2.2: Working with Input, Math, and Constants",
          "duration": 40,
          "difficulty": "beginner"
        }
      ]
    },
    {
      "id": "control_flow",
      "title": "Module 3: Control Flow",
      "description": "Practice branches and loops to build interactive programs.",
      "lessons": [
        {
          "id": "conditionals_cpp",
          "title": "Lesson 3.1: Decisions with if and switch",
          "duration": 50,
          "difficulty": "intermediate"
        },
        {
          "id": "loops_cpp",
          "title": "Lesson 3.2: Iteration with for and while",
          "duration": 55,
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "id": "functions_and_structure",
      "title": "Module 4: Functions and Program Structure",
      "description": "Refactor code into reusable functions and separate translation units.",
      "lessons": [
        {
          "id": "functions_cpp",
          "title": "Lesson 4.1: Declaring and Calling Functions",
          "duration": 45,
          "difficulty": "intermediate"
        },
        {
          "id": "header_basics_cpp",
          "title": "Lesson 4.2: Header Files and Separate Compilation",
          "duration": 60,
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "id": "data_structures_cpp",
      "title": "Module 5: Data Collections",
      "description": "Manage grouped data with STL containers and custom types.",
      "lessons": [
        {
          "id": "vectors_cpp",
          "title": "Lesson 5.1: Working with std::vector",
          "duration": 50,
          "difficulty": "intermediate"
        },
        {
          "id": "structs_cpp",
          "title": "Lesson 5.2: Modeling Data with Structs",
          "duration": 55,
          "difficulty": "intermediate"
        },
        {
          "id": "classes_objects_cpp",
          "title": "Lesson 5.3: Introduction to Classes and Objects",
          "duration": 60,
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "id": "algorithms_and_maps",
      "title": "Module 6: Algorithms and Maps",
      "description": "Apply associative containers and STL algorithms to analyse data.",
      "lessons": [
        {
          "id": "maps_cpp",
          "title": "Lesson 6.1: Organising Keys with std::map",
          "duration": 60,
          "difficulty": "intermediate"
        },
        {
          "id": "stl_algorithms_cpp",
          "title": "Lesson 6.2: Solving Problems with STL Algorithms",
          "duration": 60,
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "id": "oop_cpp",
      "title": "Module 7: Object-Oriented Programming",
      "description": "Master classes, inheritance, and polymorphism to build modular, extensible software.",
      "lessons": [
        {
          "id": "classes_encapsulation_cpp",
          "title": "Lesson 7.1: Classes and Encapsulation",
          "duration": 60,
          "difficulty": "intermediate"
        },
        {
          "id": "inheritance_cpp",
          "title": "Lesson 7.2: Inheritance",
          "duration": 60,
          "difficulty": "intermediate"
        },
        {
          "id": "polymorphism_cpp",
          "title": "Lesson 7.3: Polymorphism and Virtual Functions",
          "duration": 60,
          "difficulty": "advanced"
        }
      ]
    },
    {
      "id": "templates_cpp",
      "title": "Module 8: Templates and Generic Programming",
      "description": "Write reusable, type-safe code with templates and understand STL implementation.",
      "lessons": [
        {
          "id": "function_class_templates_cpp",
          "title": "Lesson 8.1: Function and Class Templates",
          "duration": 60,
          "difficulty": "advanced"
        },
        {
          "id": "stl_internals_cpp",
          "title": "Lesson 8.2: STL Internals and Custom Containers",
          "duration": 60,
          "difficulty": "advanced"
        }
      ]
    },
    {
      "id": "exception_handling_cpp",
      "title": "Module 9: Exception Handling and Error Management",
      "description": "Master exception handling, RAII, and robust error management in C++.",
      "lessons": [
        {
          "id": "basic_exceptions_cpp",
          "title": "Lesson 9.1: Basic Exception Handling",
          "duration": 60,
          "difficulty": "intermediate"
        },
        {
          "id": "exception_safety_cpp",
          "title": "Lesson 9.2: Exception Safety and RAII",
          "duration": 60,
          "difficulty": "advanced"
        }
      ]
    },
    {
      "id": "file_io_cpp",
      "title": "Module 10: File I/O and Streams",
      "description": "Master file input/output operations using C++ streams for data persistence and serialization.",
      "lessons": [
        {
          "id": "file_streams_cpp",
          "title": "Lesson 10.1: File Streams and Serialization",
          "duration": 60,
          "difficulty": "intermediate"
        }
      ]
    },
    {
      "id": "advanced_data_structures_cpp",
      "title": "Module 11: Data Structures and Algorithms",
      "description": "Apply advanced data structures and algorithmic patterns to solve performance-critical problems in modern C++.",
      "lessons": [
        {
          "id": "priority_queues_intro_cpp",
          "title": "Lesson 11.0: Launching Advanced Data Structures",
          "duration": 65,
          "difficulty": "advanced"
        },
        {
          "id": "priority_queues_heaps_cpp",
          "title": "Lesson 11.1: Heaps and Priority Queues",
          "duration": 75,
          "difficulty": "advanced"
        },
        {
          "id": "union_find_disjoint_sets_cpp",
          "title": "Lesson 11.2: Union-Find and Disjoint Set Optimisation",
          "duration": 80,
          "difficulty": "advanced"
        },
        {
          "id": "graph_traversal_dfs_bfs_cpp",
          "title": "Lesson 11.3: Graph Traversal with DFS and BFS",
          "duration": 85,
          "difficulty": "advanced"
        },
        {
          "id": "shortest_paths_dijkstra_bellman_ford_cpp",
          "title": "Lesson 11.4: Shortest Paths Algorithms (Dijkstra and Bellman-Ford)",
          "duration": 90,
          "difficulty": "advanced"
        }
      ]
    }
  ],
  "prerequisites": [
    "Basic computer literacy",
    "Ability to run commands in a terminal"
  ],
  "outcomes": [
    "Compile and run console-based C++ programs",
    "Use variables, arithmetic, and user input safely",
    "Control program flow with conditional logic and loops",
    "Organize code into reusable functions and header/source pairs",
    "Leverage STL containers and algorithms to summarise datasets",
    "Design object-oriented hierarchies with classes, inheritance, and polymorphism",
    "Implement generic code with templates for type safety and reusability",
    "Handle errors gracefully with exceptions and ensure resource safety",
    "Read from and write to files using C++ streams for data persistence"
  ]
}
