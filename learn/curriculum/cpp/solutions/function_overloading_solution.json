{
  "exerciseId": "function_overloading_exercise",
  "variants": [
    {
      "id": "function_overloading_cpp",
      "language": "cpp",
      "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <string>\n\nstd::string format_grade(int pointsEarned, int pointsPossible);\nstd::string format_grade(double percentage);\nstd::string format_grade(const std::string& letterGrade);\n\nint main() {\n    std::cout << format_grade(45, 50) << std::endl;\n    std::cout << format_grade(92.25) << std::endl;\n    std::cout << format_grade(\"B+\") << std::endl;\n    return 0;\n}\n\nstd::string format_grade(int pointsEarned, int pointsPossible) {\n    double percent = 0.0;\n    if (pointsPossible != 0) {\n        percent = static_cast<double>(pointsEarned) / static_cast<double>(pointsPossible) * 100.0;\n    }\n    std::ostringstream output;\n    output << std::fixed << std::setprecision(1);\n    output << \"Score: \" << percent << \"% (raw points)\";\n    return output.str();\n}\n\nstd::string format_grade(double percentage) {\n    std::ostringstream output;\n    output << std::fixed << std::setprecision(1);\n    output << \"Score: \" << percentage << \"% (percentage)\";\n    return output.str();\n}\n\nstd::string format_grade(const std::string& letterGrade) {\n    std::ostringstream output;\n    output << \"Score: \" << letterGrade << \" (letter grade)\";\n    return output.str();\n}\n",
      "explanation": "Each overload targets a different parameter list: integers for raw scores, double for percentage values, and std::string for letter grades. We keep the formatting consistent using std::ostringstream with fixed precision, mirroring Chapter 8 guidance.",
      "keyPoints": [
        "Overload strictly by parameter lists; the return type stays std::string for all versions.",
        "Cast integer totals to double before division so the raw points overload preserves decimals.",
        "Configure the ostringstream once per overload with std::fixed and std::setprecision(1).",
        "Leave printing to callersâ€”each overload returns the formatted string so main() can manage output.",
        "Prototypes precede main() and definitions follow it, matching the structure recommended in the book."
      ]
    }
  ]
}
