{
  "exerciseId": "chapter_05_arrays_and_loops_exercise",
  "c": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "",
    "int sum_array(void) {",
    "    int values[5] = {1, 2, 3, 4, 5};",
    "    int sum = 0;",
    "    size_t size = sizeof(values) / sizeof(values[0]);",
    "    for (size_t i = 0; i < size; ++i) {",
    "        sum += values[i];",
    "    }",
    "    return sum;",
    "}",
    "",
    "int sum_to_n(int n) {",
    "    int sum = 0;",
    "    for (int i = 1; i <= n; ++i) {",
    "        sum += i;",
    "    }",
    "    return sum;",
    "}",
    "",
    "int count_positives(void) {",
    "    int count = 0;",
    "    int value;",
    "    while (scanf(\"%d\", &value) == 1 && value != 0) {",
    "        if (value > 0) {",
    "            ++count;",
    "        }",
    "    }",
    "    return count;",
    "}",
    "",
    "void double_values(int numbers[], int size) {",
    "    for (int i = 0; i < size; ++i) {",
    "        numbers[i] *= 2;",
    "    }",
    "}",
    "",
    "void fill_multiplication_table(int table[10][10]) {",
    "    for (int i = 0; i < 10; ++i) {",
    "        for (int j = 0; j < 10; ++j) {",
    "            table[i][j] = (i + 1) * (j + 1);",
    "        }",
    "    }",
    "}",
    "",
    "int sum_until_100(void) {",
    "    int sum = 0;",
    "    int value = 1;",
    "    while (sum <= 100) {",
    "        sum += value;",
    "        ++value;",
    "    }",
    "    return sum;",
    "}",
    "",
    "int sum_positives_only(const int numbers[], int size) {",
    "    int sum = 0;",
    "    for (int i = 0; i < size; ++i) {",
    "        if (numbers[i] < 0) {",
    "            continue;",
    "        }",
    "        sum += numbers[i];",
    "    }",
    "    return sum;",
    "}",
    "",
    "int main(void) {",
    "    printf(\"Array sum: %d\\n\", sum_array());",
    "    printf(\"Sum to 5: %d\\n\", sum_to_n(5));",
    "    printf(\"Sum to 10: %d\\n\", sum_to_n(10));",
    "",
    "    int test_vec[] = {1, 2, 3};",
    "    double_values(test_vec, 3);",
    "    printf(\"Doubled values: %d %d %d\\n\", test_vec[0], test_vec[1], test_vec[2]);",
    "",
    "    int table[10][10] = {0};",
    "    fill_multiplication_table(table);",
    "    printf(\"Multiplication table: %d %d %d\\n\", table[0][0], table[2][3], table[9][9]);",
    "",
    "    int test_data[] = {1, -2, 3, -4, 5};",
    "    printf(\"Positive sum: %d\\n\", sum_positives_only(test_data, 5));",
    "",
    "    return 0;",
    "}"
  ],
  "cpp": [
    "#include <iostream>",
    "#include <vector>",
    "#include <array>",
    "",
    "int sum_array() {",
    "    int values[5] {1, 2, 3, 4, 5};",
    "    int sum = 0;",
    "    for (size_t i = 0; i < std::size(values); ++i) {",
    "        sum += values[i];",
    "    }",
    "    return sum;",
    "}",
    "",
    "int sum_to_n(int n) {",
    "    int sum = 0;",
    "    for (int i = 1; i <= n; ++i) {",
    "        sum += i;",
    "    }",
    "    return sum;",
    "}",
    "",
    "int count_positives() {",
    "    int count = 0;",
    "    int value;",
    "    while (std::cin >> value && value != 0) {",
    "        if (value > 0) {",
    "            ++count;",
    "        }",
    "    }",
    "    return count;",
    "}",
    "",
    "void double_values(std::vector<int>& numbers) {",
    "    for (int& num : numbers) {",
    "        num *= 2;",
    "    }",
    "}",
    "",
    "void fill_multiplication_table(int table[10][10]) {",
    "    for (int i = 0; i < 10; ++i) {",
    "        for (int j = 0; j < 10; ++j) {",
    "            table[i][j] = (i + 1) * (j + 1);",
    "        }",
    "    }",
    "}",
    "",
    "int sum_until_100() {",
    "    std::vector<int> numbers;",
    "    int sum = 0;",
    "    int value = 1;",
    "    while (sum <= 100) {",
    "        numbers.push_back(value);",
    "        sum += value;",
    "        ++value;",
    "    }",
    "    return sum;",
    "}",
    "",
    "int sum_positives_only(const std::vector<int>& numbers) {",
    "    int sum = 0;",
    "    for (int num : numbers) {",
    "        if (num < 0) {",
    "            continue;",
    "        }",
    "        sum += num;",
    "    }",
    "    return sum;",
    "}",
    "",
    "int main() {",
    "    std::cout << \"Array sum: \" << sum_array() << std::endl;",
    "    std::cout << \"Sum to 5: \" << sum_to_n(5) << std::endl;",
    "    std::cout << \"Sum to 10: \" << sum_to_n(10) << std::endl;",
    "",
    "    std::vector<int> test_vec = {1, 2, 3};",
    "    double_values(test_vec);",
    "    std::cout << \"Doubled values: \" << test_vec[0] << \" \" << test_vec[1] << \" \" << test_vec[2] << std::endl;",
    "",
    "    int table[10][10] = {};",
    "    fill_multiplication_table(table);",
    "    std::cout << \"Multiplication table: \" << table[0][0] << \" \" << table[2][3] << \" \" << table[9][9] << std::endl;",
    "",
    "    std::vector<int> test_data = {1, -2, 3, -4, 5};",
    "    std::cout << \"Positive sum: \" << sum_positives_only(test_data) << std::endl;",
    "",
    "    return 0;",
    "}"
  ],
  "explanation": "Complete C and C++ implementations that satisfy the Chapter 5 array and loop exercises while producing the verification output required by the automated tests.",
  "keyPoints": [
    "Use safe bounds checks (sizeof or std::size) when iterating arrays",
    "Classic for loops and while loops each have clear use cases",
    "Range-based loops simplify container traversal in C++",
    "Nested loops are ideal for multidimensional data",
    "continue helps focus on positive values without extra nesting",
    "Dynamic or growing containers prevent hardcoded limits",
    "Printing a deterministic summary output enables automated verification"
  ]
}