{
  "exerciseId": "chapter_05_arrays_and_loops_exercise",
  "variants": [
    {
      "id": "chapter_05_arrays_and_loops_exercise_c",
      "language": "c",
      "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_array(void) {\n    int values[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    size_t size = sizeof(values) / sizeof(values[0]);\n    for (size_t i = 0; i < size; ++i) {\n        sum += values[i];\n    }\n    return sum;\n}\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\nint count_positives(void) {\n    int count = 0;\n    int value;\n    while (scanf(\"%d\", &value) == 1 && value != 0) {\n        if (value > 0) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nvoid double_values(int numbers[], int size) {\n    for (int i = 0; i < size; ++i) {\n        numbers[i] *= 2;\n    }\n}\n\nvoid fill_multiplication_table(int table[10][10]) {\n    for (int i = 0; i < 10; ++i) {\n        for (int j = 0; j < 10; ++j) {\n            table[i][j] = (i + 1) * (j + 1);\n        }\n    }\n}\n\nint sum_until_100(void) {\n    int sum = 0;\n    int value = 1;\n    while (sum <= 100) {\n        sum += value;\n        ++value;\n    }\n    return sum;\n}\n\nint sum_positives_only(const int numbers[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; ++i) {\n        if (numbers[i] < 0) {\n            continue;\n        }\n        sum += numbers[i];\n    }\n    return sum;\n}\n\nint main(void) {\n    printf(\"Array sum: %d\\n\", sum_array());\n    printf(\"Sum to 5: %d\\n\", sum_to_n(5));\n    printf(\"Sum to 10: %d\\n\", sum_to_n(10));\n\n    int test_vec[] = {1, 2, 3};\n    double_values(test_vec, 3);\n    printf(\"Doubled values: %d %d %d\\n\", test_vec[0], test_vec[1], test_vec[2]);\n\n    int table[10][10] = {0};\n    fill_multiplication_table(table);\n    printf(\"Multiplication table: %d %d %d\\n\", table[0][0], table[2][3], table[9][9]);\n\n    int test_data[] = {1, -2, 3, -4, 5};\n    printf(\"Positive sum: %d\\n\", sum_positives_only(test_data, 5));\n\n    return 0;\n}\n",
      "explanation": "C implementation mirroring the lesson blueprint with classic arrays and deterministic output for the automated grader.",
      "keyPoints": [
        "sizeof/sizeof preserves safe bounds for index-based loops.",
        "continue skips negative values during the positive-only accumulation.",
        "The report lines match the exact labels the Chapter 5 tests expect."
      ]
    },
    {
      "id": "chapter_05_arrays_and_loops_exercise_cpp",
      "language": "cpp",
      "code": "#include <iostream>\n#include <vector>\n#include <array>\n\nint sum_array() {\n    int values[5] {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (size_t i = 0; i < std::size(values); ++i) {\n        sum += values[i];\n    }\n    return sum;\n}\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\nint count_positives() {\n    int count = 0;\n    int value;\n    while (std::cin >> value && value != 0) {\n        if (value > 0) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nvoid double_values(std::vector<int>& numbers) {\n    for (int& num : numbers) {\n        num *= 2;\n    }\n}\n\nvoid fill_multiplication_table(int table[10][10]) {\n    for (int i = 0; i < 10; ++i) {\n        for (int j = 0; j < 10; ++j) {\n            table[i][j] = (i + 1) * (j + 1);\n        }\n    }\n}\n\nint sum_until_100() {\n    std::vector<int> numbers;\n    int sum = 0;\n    int value = 1;\n    while (sum <= 100) {\n        numbers.push_back(value);\n        sum += value;\n        ++value;\n    }\n    return sum;\n}\n\nint sum_positives_only(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (int num : numbers) {\n        if (num < 0) {\n            continue;\n        }\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::cout << \"Array sum: \" << sum_array() << std::endl;\n    std::cout << \"Sum to 5: \" << sum_to_n(5) << std::endl;\n    std::cout << \"Sum to 10: \" << sum_to_n(10) << std::endl;\n\n    std::vector<int> test_vec = {1, 2, 3};\n    double_values(test_vec);\n    std::cout << \"Doubled values: \" << test_vec[0] << \" \" << test_vec[1] << \" \" << test_vec[2] << std::endl;\n\n    int table[10][10] = {};\n    fill_multiplication_table(table);\n    std::cout << \"Multiplication table: \" << table[0][0] << \" \" << table[2][3] << \" \" << table[9][9] << std::endl;\n\n    std::vector<int> test_data = {1, -2, 3, -4, 5};\n    std::cout << \"Positive sum: \" << sum_positives_only(test_data) << std::endl;\n\n    return 0;\n}\n",
      "explanation": "C++ variant using std::size, range-based loops, and the reporting blueprint from the lesson.",
      "keyPoints": [
        "std::size prevents mismatched array bounds in classic for loops.",
        "Range-based loops with references update the vector in place for the doubled values check.",
        "Outputs stay identical to the labels enforced by the automated grader."
      ]
    }
  ]
}