{
  "exerciseId": "break_continue_exercise",
  "variants": [
    {
      "id": "break_continue_cpp",
      "language": "cpp",
      "code": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> kept{};\n    int sum = 0;\n\n    for (int i = 0; i < 10; ++i) {\n        int value = 0;\n        if (!(std::cin >> value)) {\n            break;\n        }\n\n        if (value == -1) {\n            break;\n        }\n\n        if (value < 0 || value > 100) {\n            continue;\n        }\n\n        kept.push_back(value);\n        sum += value;\n    }\n\n    std::cout << \"Inputs processed: \" << kept.size() << std::endl;\n\n    if (kept.empty()) {\n        std::cout << \"Scores: n/a\" << std::endl;\n    } else {\n        std::cout << \"Scores: \";\n        for (std::size_t index = 0; index < kept.size(); ++index) {\n            if (index > 0) {\n                std::cout << ' ';\n            }\n            std::cout << kept[index];\n        }\n        std::cout << std::endl;\n    }\n\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}\n",
      "explanation": "Read at most ten integers, breaking immediately on the sentinel -1, and skipping values outside 0..100 with continue. Valid scores are stored in order, summed, and then printed with the required format.",
      "keyPoints": [
        "Use a bounded for loop to enforce the maximum of ten reads.",
        "Check for the sentinel before other logic so break stops the loop immediately.",
        "continue cleanly skips invalid scores without affecting the stored results.",
        "Printing handles the empty case with n/a and otherwise joins entries with single spaces."
      ]
    }
  ]
}
