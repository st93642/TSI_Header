{
  "id": "constructors_destructors_solution",
  "title": "Solution 5.2: Manage a Lab Session Lifecycle",
  "description": "Complete implementation of LabSession demonstrating constructor delegation, RAII, and destructor logging.",
  "language": "cpp",
  "code": "#include <iostream>\n#include <string>\n\nclass LabSession {\npublic:\n    LabSession() : LabSession(\"General Lab\", 0, 0, false) {}\n\n    LabSession(std::string name, int seats, int computers, bool safetyBriefing)\n        : name_(std::move(name)), seats_(seats), computers_(computers), safetyBriefing_(safetyBriefing) {}\n\n    ~LabSession() {\n        std::cout << \"Closing \" << name_ << std::endl;\n    }\n\n    bool requiresBriefing() const {\n        return safetyBriefing_;\n    }\n\n    bool hasEnoughComputers() const {\n        return computers_ >= seats_;\n    }\n\n    void printStatus() const {\n        std::cout << \"Lab: \" << name_ << std::endl;\n        std::cout << \"Seats: \" << seats_ << std::endl;\n        std::cout << \"Computers: \" << computers_ << std::endl;\n        std::cout << \"Safety Briefing: \" << (requiresBriefing() ? \"Yes\" : \"No\") << std::endl;\n        std::cout << \"Ready: \" << (hasEnoughComputers() ? \"Yes\" : \"No\") << std::endl;\n    }\n\nprivate:\n    std::string name_;\n    int seats_{};\n    int computers_{};\n    bool safetyBriefing_{};\n};\n\nint main() {\n    std::string name;\n    std::getline(std::cin >> std::ws, name);\n\n    int seats{};\n    int computers{};\n    int briefingFlag{};\n    std::cin >> seats >> computers >> briefingFlag;\n\n    {\n        LabSession session(name, seats, computers, briefingFlag != 0);\n        session.printStatus();\n    }\n\n    return 0;\n}\n",
  "explanation": [
    "The default constructor delegates to the four-parameter constructor to ensure one place sets the canonical defaults.",
    "The parameterized constructor uses a member initializer list so each field is initialized exactly once.",
    "Helpers requiresBriefing() and hasEnoughComputers() keep printStatus() focused on formatting logic.",
    "The destructor prints the mandatory cleanup line, demonstrating RAIIâ€”no manual calls are required; the scoped block guarantees execution."  ]
}
