{
  "exerciseId": "references_exercise",
  "variants": [
    {
      "id": "references_cpp",
      "language": "cpp",
      "code": "#include <iostream>\\n#include <sstream>\\n#include <utility>\\n\\nstd::string adjust_boundaries(int& minimum, int& maximum, int adjustment);\\n\\nint main() {\\n    int lower {70};\\n    int upper {95};\\n    std::cout << adjust_boundaries(lower, upper, 5) << std::endl;\\n\\n    int rangeMin {88};\\n    int rangeMax {90};\\n    std::cout << adjust_boundaries(rangeMin, rangeMax, -5) << std::endl;\\n\\n    return 0;\\n}\\n\\nstd::string adjust_boundaries(int& minimum, int& maximum, int adjustment) {\\n    const int originalMin {minimum};\\n    const int originalMax {maximum};\\n\\n    minimum += adjustment;\\n    maximum += adjustment;\\n\\n    if (minimum > maximum) {\\n        std::swap(minimum, maximum);\\n    }\\n\\n    std::ostringstream out;\\n    out << \"Original Min: \" << originalMin << '\\\\n';\\n    out << \"Original Max: \" << originalMax << '\\\\n';\\n    out << \"Adjusted Min: \" << minimum << '\\\\n';\\n    out << \"Adjusted Max: \" << maximum;\\n    return out.str();\\n}\\n",
      "explanation": "By taking parameters by reference, the function updates the caller's variables while still returning a detailed summary string. Capturing the originals first allows the report to show both before and after values.",
      "keyPoints": [
        "Store the original values before applying adjustments so you can report them later.",
        "References let you modify the caller's variables without pointer syntax.",
        "std::swap ensures the adjusted range maintains minimum <= maximum.",
        "std::ostringstream builds the required four-line output blueprint.",
        "Returning the string leaves printing logic with the caller for easy testing."
      ]
    }
  ]
}
