{
  "exerciseId": "variables_types_exercise",
  "variants": [
    {
      "id": "variables_types_c",
      "language": "c",
      "code": "#include <stdio.h>\n#include <stdbool.h>\n\nint main(void) {\n    int students = 28;\n    double averageScore = 91.5;\n    char topGrade = 'A';\n    bool accredited = true;\n\n    printf(\"Students: %d\\n\", students);\n    printf(\"Average Score: %.1f\\n\", averageScore);\n    printf(\"Top Grade: %c\\n\", topGrade);\n    printf(\"Accredited: %s\\n\", accredited ? \"true\" : \"false\");\n    return 0;\n}\n",
      "explanation": "We declare variables for each required value, taking advantage of <stdbool.h> for the boolean flag. printf is used with the correct format specifiers to match the expected output labels and precision.",
      "keyPoints": [
        "<stdbool.h> enables the bool type in C",
        "printf format specifiers control the appearance of each value",
        "Converting the boolean to true/false text keeps the output human-readable",
        "Each line matches the exact label required by the tests"
      ]
    },
    {
      "id": "variables_types_cpp",
      "language": "cpp",
      "code": "#include <iostream>\n#include <string>\n\nint main() {\n    const std::string courseName = \"TSI C++ Essentials\";\n    int seats = 24;\n    double passRate = 92.3;\n    bool hasLab = true;\n\n    std::cout << \"Course: \" << courseName << std::endl;\n    std::cout << \"Seats: \" << seats << std::endl;\n    std::cout << \"Pass Rate: \" << passRate << std::endl;\n    std::cout << \"Has Lab: \" << (hasLab ? \"yes\" : \"no\") << std::endl;\n    return 0;\n}\n",
      "explanation": "Modern C++ makes it simple to store text with std::string and booleans with bool. Before printing the boolean we map it to yes/no so the output matches the specification.",
      "keyPoints": [
        "Use std::string for text data in C++",
        "const protects values that should not change",
        "std::cout prints each value with simple operator chaining",
        "The conditional operator converts bool to a user-friendly message"
      ]
    }
  ]
}
