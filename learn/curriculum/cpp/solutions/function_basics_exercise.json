{
  "exerciseId": "function_basics_exercise",
  "variants": [
    {
      "id": "function_basics_cpp",
      "language": "cpp",
      "code": "#include <iostream>\n#include <iomanip>\n\nint calculate_total(int first, int second, int third);\ndouble calculate_average(int total, int count);\n\nint main() {\n    int exam = 0;\n    int project = 0;\n    int participation = 0;\n\n    std::cin >> exam >> project >> participation;\n\n    int total = calculate_total(exam, project, participation);\n    double average = calculate_average(total, 3);\n\n    std::cout << \"Scores: \" << exam << ' ' << project << ' ' << participation << std::endl;\n    std::cout << \"Total: \" << total << std::endl;\n\n    std::cout << std::fixed << std::setprecision(2);\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}\n\nint calculate_total(int first, int second, int third) {\n    return first + second + third;\n}\n\ndouble calculate_average(int total, int count) {\n    return static_cast<double>(total) / count;\n}\n",
      "explanation": "Prototypes appear before main so the helper functions can be called. calculate_total sums three values, and calculate_average converts the total to double before dividing by the count, matching the two-decimal output requirement.",
      "keyPoints": [
        "Function prototypes above main() mirror the structure recommended in *Beginning C++17*.",
        "Helper functions receive arguments by value, keeping the caller's variables unchanged.",
        "static_cast<double>(total) ensures floating-point division, avoiding integer truncation.",
        "std::fixed with std::setprecision(2) formats the average exactly as the tests expect."
      ]
    }
  ]
}
