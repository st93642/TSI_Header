{
  "exerciseId": "chapter_03_working_with_data_exercise",
  "variants": [
    {
      "id": "chapter_03_working_with_data_exercise",
      "language": "cpp",
      "code": "#include <iostream>\n#include <bitset>\n#include <cstdint>\n\nconstexpr unsigned int FRONT_DOOR_MASK {0b0001};\nconstexpr unsigned int BACK_DOOR_MASK  {0b0010};\nconstexpr unsigned int SIDE_DOOR_MASK  {0b0100};\nconstexpr unsigned int GARAGE_DOOR_MASK{0b1000};\n\nconstexpr bool sensor_active(unsigned int mask, unsigned int flag) {\n    return (mask & flag) != 0U;\n}\n\nint main() {\n    unsigned int mask{};\n    std::cin >> mask;\n\n    std::cout << \"Mask: \" << mask << '\\n';\n    std::cout << \"Binary: \" << std::bitset<4>(mask) << '\\n';\n    std::cout << \"Front Door Open: \" << (sensor_active(mask, FRONT_DOOR_MASK) ? \"Yes\" : \"No\") << '\\n';\n    std::cout << \"Back Door Open: \" << (sensor_active(mask, BACK_DOOR_MASK) ? \"Yes\" : \"No\") << '\\n';\n    std::cout << \"Side Door Open: \" << (sensor_active(mask, SIDE_DOOR_MASK) ? \"Yes\" : \"No\") << '\\n';\n    std::cout << \"Garage Door Open: \" << (sensor_active(mask, GARAGE_DOOR_MASK) ? \"Yes\" : \"No\");\n\n    return 0;\n}\n",
      "explanation": "Four constexpr masks describe each door sensor, and a helper function wraps the bitwise AND check so the output section reads clearly.",
      "keyPoints": [
        "constexpr unsigned int flags document the meaning of each bit without introducing enums.",
        "std::bitset<4> provides a padded binary view of the mask.",
        "Printing the unsigned mask directly avoids unintended character conversions." 
      ]
    }
  ]
}
