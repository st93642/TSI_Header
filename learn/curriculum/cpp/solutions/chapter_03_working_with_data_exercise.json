{
  "exerciseId": "chapter_03_working_with_data_exercise",
  "variants": [
    {
      "id": "chapter_03_working_with_data_exercise",
      "language": "cpp",
      "code": "#include <iostream>\n#include <bitset>\n#include <cstdint>\n\nenum class AccessFlag : std::uint8_t {\n    student = 0b0001,\n    lab = 0b0010,\n    researcher = 0b0100,\n    admin = 0b1000\n};\n\nconstexpr std::uint8_t operator|(AccessFlag lhs, AccessFlag rhs) {\n    return static_cast<std::uint8_t>(lhs) | static_cast<std::uint8_t>(rhs);\n}\n\nconstexpr bool has_flag(std::uint8_t mask, AccessFlag flag) {\n    return (mask & static_cast<std::uint8_t>(flag)) != 0;\n}\n\nint main() {\n    std::uint8_t mask{};\n    std::cin >> mask;\n\n    std::cout << \"Mask: \" << static_cast<int>(mask) << '\n';\n    std::cout << \"Binary: \" << std::bitset<4>(mask) << '\n';\n    std::cout << \"Student Access: \" << (has_flag(mask, AccessFlag::student) ? \"Yes\" : \"No\") << '\n';\n    std::cout << \"Lab Access: \" << (has_flag(mask, AccessFlag::lab) ? \"Yes\" : \"No\") << '\n';\n    std::cout << \"Researcher Access: \" << (has_flag(mask, AccessFlag::researcher) ? \"Yes\" : \"No\") << '\n';\n    std::cout << \"Admin Access: \" << (has_flag(mask, AccessFlag::admin) ? \"Yes\" : \"No\");\n\n    return 0;\n}\n",
      "explanation": "Represent permissions with a scoped enum, test bits via bitwise AND, and present the results using std::bitset<4> to show the binary mask.",
      "keyPoints": [
        "Scoped enums prevent accidental mixing of plain integers and flags.",
        "Helper function has_flag encapsulates the bitwise check logic.",
        "Casting mask to int before printing avoids interpreting it as char." 
      ]
    }
  ]
}
