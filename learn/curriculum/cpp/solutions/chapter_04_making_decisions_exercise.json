{
  "exerciseId": "chapter_04_making_decisions_exercise",
  "variants": [
    {
      "id": "chapter_04_making_decisions_exercise",
      "language": "cpp",
  "code": "#include <iostream>\\n#include <string>\\n#include <cctype>\\n\\nint main() {\\n    std::string role;\\n    std::getline(std::cin >> std::ws, role);\\n\\n    int age{};\\n    std::cin >> age;\\n\\n    std::cout << \\\"Role: \\\" << role << '\\\\n';\\n    std::cout << \\\"Age: \\\" << age << '\\\\n';\\n\\n    if (age < 0) {\\n        std::cout << \\\"Error: invalid age\\\";\\n        return 0;\\n    }\\n\\n    auto first = role.empty() ? '\\\\0' : static_cast<char>(std::tolower(role.front()));\\n\\n    switch (first) {\\n        case 's':\\n            if (age < 25) {\\n                std::cout << \\\"Access: General Lab\\\\nAction: Issue day badge\\\";\\n            } else {\\n                std::cout << \\\"Access: General Lab\\\\nAction: Issue semester badge\\\";\\n            }\\n            break;\\n        case 'r':\\n            std::cout << \\\"Access: Advanced Lab\\\\nAction: Escort to clean room\\\";\\n            break;\\n        case 'g':\\n        default:\\n            std::cout << \\\"Access: Lobby Only\\\\nAction: Notify host\\\";\\n            break;\\n    }\\n\\n    return 0;\\n}\\n",
      "explanation": "Validate input first, then switch on the initial character of the role string to route to the proper access decision. Additional branching handles the student age requirement.",
      "keyPoints": [
        "Input validation occurs before the switch to avoid duplicated checks.",
        "Switch statements operate on a single character for simplicity.",
        "Default case covers guests and any unexpected roles." 
      ]
    }
  ]
}
