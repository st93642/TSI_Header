{
  "id": "dynamic_memory_exercise",
  "title": "Exercise 4.3: Summarize Scores with Dynamic Memory",
  "description": "Allocate a dynamic array sized by user input, copy scores into it, compute summary statistics, and release the memory safely.",
  "difficulty": "intermediate",
  "tags": [
    "dynamic-memory",
    "smart-pointers",
    "streams",
    "formatting"
  ],
  "variants": [
    {
      "id": "dynamic_memory_cpp",
      "title": "Exercise 4.3: Summarize Scores with Dynamic Memory (C++)",
      "language": "cpp",
      "difficulty": "intermediate",
      "starterCode": "#include <iomanip>\n#include <iostream>\n#include <memory>\n#include <sstream>\n\n// Implement summarize_dynamic_scores() to demonstrate safe dynamic allocation.\n// Required prototype (declare before main, define after main):\n//   std::string summarize_dynamic_scores();\n// Requirements (align with Chapter 12 guidance on std::unique_ptr):\n//   1. Read an integer count from std::cin.\n//        - If count <= 0, return the exact string \"No scores provided\".\n//   2. Allocate a dynamic array sized count using std::make_unique<int[]>(count).\n//   3. Read exactly count integers from std::cin into the dynamic array (in order).\n//   4. Compute the sum and the average (sum / static_cast<double>(count)).\n//   5. Format the result using std::ostringstream, std::fixed, and std::setprecision(1).\n//      Blueprint (match exactly):\n//        Count: <count>\n//        Scores: <value1> <value2> ... <valueN>\n//        Sum: <sum>\n//        Average: <avg with one decimal>\n//   6. Return the formatted string (do NOT print inside summarize_dynamic_scores).\n//   7. main() prints the string. std::unique_ptr releases the dynamic array automatically.\n\nstd::string summarize_dynamic_scores();\n\nint main() {\n    std::cout << summarize_dynamic_scores() << std::endl;\n    return 0;\n}\n\n// Define summarize_dynamic_scores() here following the steps above.\n\n",
      "tests": [
        {
          "name": "typical_input",
          "description": "Three scores with positive count.",
          "type": "output",
          "input": "3\n78 84 90\n",
          "expected": "Count: 3\nScores: 78 84 90\nSum: 252\nAverage: 84.0"
        },
        {
          "name": "single_score",
          "description": "One-element allocation.",
          "type": "output",
          "input": "1\n100\n",
          "expected": "Count: 1\nScores: 100\nSum: 100\nAverage: 100.0"
        },
        {
          "name": "no_scores",
          "description": "Non-positive count triggers early return.",
          "type": "output",
          "input": "0\n",
          "expected": "No scores provided"
        }
      ],
      "hints": [
        "Use auto scores = std::make_unique<int[]>(count); to manage the buffer.",
        "Fill the array with a simple for loop and pointer dereferencing (scores[i]).",
        "Accumulate the sum in a long long or int, then compute the average with static_cast<double>.",
        "Build the scores line by appending each value plus a space except after the last element.",
        "Return the ostringstream contents so the caller controls printing and newline handling."
      ]
    }
  ]
}
