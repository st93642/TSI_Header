{
  "id": "maps_cpp_exercise",
  "title": "Tally Items with std::map",
  "description": "Use `std::map<std::string, int>` to catalogue several named counts, reporting totals and unique entries.\n\nSteps:\n1. Print `Enter 3 fruit entries (name count):` and read exactly three pairs of `<string> <int>` from `std::cin`, storing them in a `std::map` so duplicate keys overwrite earlier values.\n2. Output `Inventory:` on its own line, then print each entry as `name -> count` using the map's key-sorted order (iterate with a ranged-for loop).\n3. After the entries, print `Unique items:` with the result of `map.size()`.\n4. Use `std::accumulate` (or a loop) to sum the stored counts and print `Total count:` with the total.\n5. Ensure every line in the report ends with a newline so automated checks can compare outputs easily.\n\nInput format:\nOne line containing three `name count` pairs separated by spaces (e.g. `apple 12 banana 7 cherry 5`).\n\nExpected output:\nEnter 3 fruit entries (name count):\nInventory:\n{name_1} -> {count_1}\n{name_2} -> {count_2}\n{name_3} -> {count_3}\nUnique items: {size}\nTotal count: {sum}\n\nExample run (input `apple 12 banana 7 cherry 5`):\nEnter 3 fruit entries (name count):\nInventory:\napple -> 12\nbanana -> 7\ncherry -> 5\nUnique items: 3\nTotal count: 24",
  "difficulty": "intermediate",
  "starterCode": "#include <iostream>\n#include <map>\n#include <numeric>\n#include <string>\n\nint main() {\n    std::cout << \"Enter 3 fruit entries (name count):\\n\";\n\n    // TODO: Read three name/count pairs into a std::map<std::string, int>.\n\n    // TODO: Print the inventory report in sorted order using the map entries.\n\n    // TODO: Report the number of unique items and the total count of values.\n\n    std::cout << \"TODO\\n\";\n    return 0;\n}\n",
  "tests": [
    {
      "name": "inventory apple banana cherry",
      "type": "output",
      "input": "apple 12 banana 7 cherry 5\n",
      "expected": "Enter 3 fruit entries (name count):\nInventory:\napple -> 12\nbanana -> 7\ncherry -> 5\nUnique items: 3\nTotal count: 24"
    },
    {
      "name": "inventory berry citrus mango",
      "type": "output",
      "input": "mango 10 berry 4 citrus 9\n",
      "expected": "Enter 3 fruit entries (name count):\nInventory:\nberry -> 4\ncitrus -> 9\nmango -> 10\nUnique items: 3\nTotal count: 23"
    }
  ],
  "hints": [
    "Use std::map<std::string, int> inventory; then inventory[name] = count;",
    "iterate with for (const auto &entry : inventory) to visit key/value pairs in sorted order;",
    "std::accumulate can fold over the map by adding entry.second to an integer seed."
  ],
  "tags": ["maps", "associative", "stl", "intermediate"]
}
