{
  "id": "default_parameters_exercise",
  "title": "Exercise 3.3: Default Parameters",
  "description": "Implement a function that uses default argument values so callers can omit optional parameters, following Chapter 8 guidance.",
  "difficulty": "intermediate",
  "tags": [
    "functions",
    "default-arguments",
    "strings",
    "formatting"
  ],
  "variants": [
    {
      "id": "default_parameters_cpp",
      "title": "Exercise 3.3: Default Parameters (C++)",
      "language": "cpp",
      "difficulty": "intermediate",
  "starterCode": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <string>\n\n// Implement format_assignment() with default arguments. Follow Chapter 8 guidance precisely.\n// Required function signature (declare the prototype before main, define it after main):\n//   std::string format_assignment(const std::string& title, int points = 100, double weight = 1.0, bool extraCredit = false);\n// Expectations:\n//   * Do NOT repeat default values in the definition. Keep defaults only in the prototype above main().\n//   * Use std::ostringstream to build the result string. Configure it with std::fixed and std::setprecision(1)\n//     before inserting the weight so that you produce exactly one decimal place.\n//   * Convert the extraCredit flag to the exact words \"Yes\" (when true) or \"No\" (when false). Do not print boolalpha.\n//   * Return a string in this exact format (pay attention to spacing, capitalization, and separators):\n//       \"Assignment: TITLE | Points: NN | Weight: X.X | Extra Credit: Yes/No\"\n//   * Demonstrate your function in main() using the provided sample calls. Do not change the sample calls.\n\nstd::string format_assignment(const std::string& title, int points = 100, double weight = 1.0, bool extraCredit = false);\n\nint main() {\n    std::cout << format_assignment(\"Project 5\", 75, 1.2, true) << std::endl;\n    std::cout << format_assignment(\"Worksheet 2\") << std::endl;\n    std::cout << format_assignment(\"Lab 4\", 20) << std::endl;\n    return 0;\n}\n\n// Define format_assignment() here (no default values in the definition).\n\n",
      "tests": [
        {
          "name": "all_arguments_provided",
          "description": "Supplying every argument should respect each value without falling back to defaults.",
          "type": "output",
          "call": "std::cout << format_assignment(\"Project 5\", 75, 1.2, true);",
          "expected": "Assignment: Project 5 | Points: 75 | Weight: 1.2 | Extra Credit: Yes"
        },
        {
          "name": "all_defaults",
          "description": "Calling with only the title should rely on all default values.",
          "type": "output",
          "call": "std::cout << format_assignment(\"Worksheet 2\");",
          "expected": "Assignment: Worksheet 2 | Points: 100 | Weight: 1.0 | Extra Credit: No"
        },
        {
          "name": "one_explicit_argument",
          "description": "Providing a custom point value should keep weight and extraCredit defaults.",
          "type": "output",
          "call": "std::cout << format_assignment(\"Lab 4\", 20);",
          "expected": "Assignment: Lab 4 | Points: 20 | Weight: 1.0 | Extra Credit: No"
        },
        {
          "name": "mixed_calls",
          "description": "Multiple calls in a single expression should preserve formatting across defaults and explicit values.",
          "type": "output",
          "call": "std::cout << format_assignment(\"Quiz 3\", 30, 0.5) << \" / \" << format_assignment(\"Bonus Task\", 10, 0.3, true);",
          "expected": "Assignment: Quiz 3 | Points: 30 | Weight: 0.5 | Extra Credit: No / Assignment: Bonus Task | Points: 10 | Weight: 0.3 | Extra Credit: Yes"
        }
      ],
      "hints": [
        "Place default values only in the prototype above main(); the definition after main() must omit them.",
        "Use std::ostringstream, set std::fixed and std::setprecision(1) before inserting the weight.",
        "Translate the extraCredit bool into the exact words 'Yes' or 'No' before adding it to the stream.",
        "Return the built string so callers (and the tests) can choose how to display it.",
        "Review Chapter 8 examples to confirm the placement of defaults and avoid redeclaration errors."
      ]
    }
  ]
}
