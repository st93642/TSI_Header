{
  "id": "chapter_05_arrays_and_loops_exercise",
  "title": "Exercise 5: Array Operations Lab",
  "description": "Master arrays and loops through hands-on practice with different container types and iteration techniques.",
  "difficulty": "intermediate",
  "tags": ["arrays", "loops", "vectors", "iteration", "containers"],
  "starterCode": "#include <iostream>\n#include <vector>\n#include <array>\n\n// Offline standard: implement the helper functions first, then\n// print the verification lines below so automated tests can compare output.\n\nint sum_array() {\n    // TODO: Declare an array with values {1, 2, 3, 4, 5}\n    // TODO: Use std::size (or a constant) to iterate safely over the array\n    return 0;\n}\n\nint sum_to_n(int n) {\n    // TODO: Use a classic for loop that accumulates values from 1 through n\n    return 0;\n}\n\nint count_positives() {\n    // TODO: Prompt for numbers until 0, counting strictly positive entries\n    return 0;\n}\n\nvoid double_values(std::vector<int>& numbers) {\n    // TODO: Use a range-based for loop by reference to multiply each value by 2\n    (void)numbers; // remove after implementation\n}\n\nvoid fill_multiplication_table(int table[10][10]) {\n    // TODO: Use nested loops so table[i][j] == (i + 1) * (j + 1)\n    (void)table; // remove after implementation\n}\n\nint sum_until_100() {\n    // TODO: Store numbers in a std::vector and stop when the running sum > 100\n    return 0;\n}\n\nint sum_positives_only(const std::vector<int>& numbers) {\n    // TODO: Iterate with a loop and continue to skip negatives\n    (void)numbers; // remove after implementation\n    return 0;\n}\n\nint main() {\n    // Output blueprint (follow exactly once the functions are implemented):\n    // Array sum: <value>\n    // Sum to 5: <value>\n    // Sum to 10: <value>\n    // Doubled values: <a> <b> <c>\n    // Multiplication table: <table[0][0]> <table[2][3]> <table[9][9]>\n    // Positive sum: <value>\n\n    std::cout << \"Array sum: \" << sum_array() << std::endl;\n    std::cout << \"Sum to 5: \" << sum_to_n(5) << std::endl;\n    std::cout << \"Sum to 10: \" << sum_to_n(10) << std::endl;\n\n    std::vector<int> test_vec = {1, 2, 3};\n    double_values(test_vec);\n    std::cout << \"Doubled values: \"\n              << test_vec[0] << \" \" << test_vec[1] << \" \" << test_vec[2] << std::endl;\n\n    int table[10][10] = {};\n    fill_multiplication_table(table);\n    std::cout << \"Multiplication table: \"\n              << table[0][0] << \" \" << table[2][3] << \" \" << table[9][9] << std::endl;\n\n    std::vector<int> test_data = {1, -2, 3, -4, 5};\n    std::cout << \"Positive sum: \" << sum_positives_only(test_data) << std::endl;\n\n    return 0;\n}\n",
  "tests": [
    {
      "name": "chapter_05_output",
      "description": "Aggregated output reports array sums and loop operations",
      "input": "",
      "expected": "Array sum: 15\nSum to 5: 15\nSum to 10: 55\nDoubled values: 2 4 6\nMultiplication table: 1 12 100\nPositive sum: 9\n",
      "type": "output"
    }
  ],
  "hints": [
    "Use std::size(array) to safely get array bounds instead of hardcoded sizes",
    "For loops are ideal for known iteration counts",
    "While loops continue until a condition becomes false",
    "Range-based for loops with references (&) can modify container elements",
    "Nested loops enable multidimensional data processing",
    "std::vector provides dynamic sizing with automatic memory management",
    "Use continue to skip unwanted iterations in loops",
    "Remember array indexing starts at 0"
  ]
}