{
  "id": "function_overloading_exercise",
  "title": "Exercise 3.2: Function Overloading",
  "description": "Practice declaring prototypes and defining overloaded functions that format grade information based on input types, following Chapter 8 of Beginning C++17.",
  "difficulty": "intermediate",
  "tags": [
    "functions",
    "overloading",
    "strings",
    "formatting"
  ],
  "variants": [
    {
      "id": "function_overloading_cpp",
      "title": "Exercise 3.2: Function Overloading (C++)",
      "language": "cpp",
      "difficulty": "intermediate",
      "starterCode": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <string>\n\n// Implement three overloads for format_grade inside this file.\n// Required overloads (declare prototypes before main, define them after main):\n//   1. format_grade(int pointsEarned, int pointsPossible)\n//        - Compute the percentage as (pointsEarned / pointsPossible) * 100.0\n//        - Round to one decimal place using std::fixed and std::setprecision(1).\n//        - Return the string: \"Score: XX.X% (raw points)\"\n//   2. format_grade(double percentage)\n//        - Treat the parameter as already a percentage (0.0 to 100.0).\n//        - Round to one decimal place using std::fixed and std::setprecision(1).\n//        - Return the string: \"Score: XX.X% (percentage)\"\n//   3. format_grade(const std::string& letterGrade)\n//        - Accept letter grades like \"A\", \"B+\", etc.\n//        - Return the string: \"Score: LETTER (letter grade)\"\n// Notes:\n//   * Do NOT rely on different return typesâ€”overload strictly by parameter lists.\n//   * Use std::ostringstream to build each string for consistent formatting.\n//   * Keep the output labels exactly as shown above (including capitalization and parentheses).\n//   * Provide prototypes before main() and definitions after main(), mirroring Chapter 8 patterns.\n//   * Demonstrate your overloads in main() using the sample calls already provided.\n\nstd::string format_grade(int pointsEarned, int pointsPossible);\nstd::string format_grade(double percentage);\nstd::string format_grade(const std::string& letterGrade);\n\nint main() {\n    std::cout << format_grade(45, 50) << std::endl;\n    std::cout << format_grade(92.25) << std::endl;\n    std::cout << format_grade(\"B+\") << std::endl;\n    return 0;\n}\n\n// Define your overloads here.\n\n",
      "tests": [
        {
          "name": "raw_points_formatting",
          "description": "Raw point overload computes a percentage with one decimal place.",
          "type": "output",
          "call": "std::cout << format_grade(45, 50);",
          "expected": "Score: 90.0% (raw points)"
        },
        {
          "name": "percentage_formatting",
          "description": "Percentage overload keeps the provided value and formats it.",
          "type": "output",
          "call": "std::cout << format_grade(88.375);",
          "expected": "Score: 88.4% (percentage)"
        },
        {
          "name": "letter_grade_formatting",
          "description": "Letter grade overload returns the label unchanged.",
          "type": "output",
          "call": "std::cout << format_grade(\"A-\");",
          "expected": "Score: A- (letter grade)"
        },
        {
          "name": "combined_usage",
          "description": "All overloads can be called in sequence without format drift.",
          "type": "output",
          "call": "std::cout << format_grade(18, 20) << \" | \" << format_grade(93.0) << \" | \" << format_grade(\"C\");",
          "expected": "Score: 90.0% (raw points) | Score: 93.0% (percentage) | Score: C (letter grade)"
        }
      ],
      "hints": [
        "Use std::ostringstream to build each string before returning it.",
        "Cast integers to double when dividing to avoid truncation in the raw points overload.",
        "Configure the stream with std::fixed and std::setprecision(1) prior to inserting the numeric value.",
        "Keep prototypes above main() and place definitions after main() to mirror the book's examples.",
        "Return the constructed string; don't print inside the overloads so callers control output."
      ]
    }
  ]
}
