{
  "id": "chapter_01_basic_ideas_exercise",
  "title": "Exercise 1: Chapter 1 Build Drill",
  "description": "Recreate the Chapter 1 practice sequence: print Hello World, report your name and age, and keep the code clean to mirror Exercises 1-1 through 1-3.",
  "difficulty": "beginner",
  "tags": ["basics", "output", "compilation", "debugging"],
  "variants": [
    {
      "id": "chapter_01_basic_ideas_c",
      "title": "Exercise 1A: Chapter 1 Warm-Up (C)",
      "language": "c",
      "difficulty": "beginner",
      "starterCode": "#include <stdio.h>\n\n// Output blueprint (follow exactly):\n//   Hello World\n//   Name: TSI Student\n//   Age: 21\n// Each line must end with a single newline and there should be no extra text.\n// Steps inspired by the textbook exercises:\n//   1. Re-create the classic Hello World to verify the toolchain (Exercise 1-1).\n//   2. Add your name and age on separate lines using the blueprint values (Exercise 1-2).\n//   3. Ensure the final program compiles cleanly—fixing any typos mirrors Exercise 1-3.\n// Broken snippet from the chapter for reference (do not copy as-is):\n//   include <stdio.h>\n//   Int main()\n//   {\n//       printf(\"Hello World\"\n);\n//   )\n\nint main(void) {\n    // TODO: Use three printf calls that match the blueprint above exactly.\n    // TODO: Maintain the capitalization and punctuation shown in the blueprint.\n    return 0;\n}\n",
      "tests": [
        {
          "name": "c_full_output",
          "description": "C variant prints the three required lines",
          "input": "",
          "expected": "Hello World\nName: TSI Student\nAge: 21\n",
          "type": "output"
        }
      ],
      "hints": [
        "Remember that a valid C program must include <stdio.h> and return 0 from main.",
        "Call printf three times—once per line—adding \"\\n\" to terminate each line.",
        "Keep the output text identical to the blueprint; automated tests compare exact strings.",
        "If you see compiler errors, compare your code to the broken snippet and look for similar typos."
      ]
    },
    {
      "id": "chapter_01_basic_ideas_cpp",
      "title": "Exercise 1B: Chapter 1 Warm-Up (C++)",
      "language": "cpp",
      "difficulty": "beginner",
      "starterCode": "#include <iostream>\n\n// Output blueprint (follow exactly):\n//   Hello World\n//   Name: TSI Student\n//   Age: 21\n// Each line must end with a single newline and there should be no extra text.\n// Chapter checkpoints:\n//   1. Print \"Hello World\" with std::cout to verify your compile-link-run loop (Exercise 1-1).\n//   2. Print \"Name: TSI Student\" and \"Age: 21\" on their own lines (Exercise 1-2).\n//   3. Keep the code standards-compliant—fixing typos reflects Exercise 1-3's debugging practice.\n// Broken snippet from the chapter for reference (do not copy as-is):\n//   include <iostream>\n//   Int main()\n//   {\n//       std:cout << \"Hello World\" << std:endl\n//   )\n\nint main() {\n    // TODO: Use std::cout with explicit std:: qualification to print the three lines above.\n    // TODO: Terminate each line with \"\\n\" or std::endl; do not add extra spaces or text.\n    return 0;\n}\n",
      "tests": [
        {
          "name": "cpp_full_output",
          "description": "C++ variant prints the three required lines",
          "input": "",
          "expected": "Hello World\nName: TSI Student\nAge: 21\n",
          "type": "output"
        }
      ],
      "hints": [
        "Include <iostream> and qualify std::cout precisely—avoid using namespace std; in Chapter 1.",
        "Chain three std::cout statements or use separate lines; each must end with a newline.",
        "Match the blueprint string for every character so the automated tests succeed.",
        "If compilation fails, compare your code against the broken snippet and correct similar mistakes."
      ]
    }
  ]
}
