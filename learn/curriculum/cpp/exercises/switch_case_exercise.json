{
  "id": "switch_case_exercise",
  "title": "Exercise 2.2: Handle Status Codes",
  "description": "Use a switch statement to print HTTP-style status messages based on a numeric code.",
  "difficulty": "beginner",
  "tags": ["switch", "control-flow", "branching"],
  "variants": [
    {
      "id": "switch_case_cpp",
      "title": "Exercise 2.2: Handle Status Codes (C++)",
      "language": "cpp",
      "difficulty": "beginner",
      "starterCode": "#include <iostream>\n\nint main() {\n    // TODO: read exactly one integer status code from std::cin\n    // TODO: use a switch statement to choose the correct message\n    // TODO: print exactly two lines using std::cout and std::endl:\n    //   Status: <original code>\n    //   Message: <matching text>\n    // Mapping requirements (match spelling and capitalization exactly):\n    //   200 -> OK\n    //   201 -> Created\n    //   400 -> Bad Request\n    //   404 -> Not Found\n    //   500 -> Internal Server Error\n    //   anything else -> Unknown Status\n    return 0;\n}\n",
      "tests": [
        {
          "name": "ok_code",
          "description": "200 should map to OK",
          "input": "200\n",
          "expected": "Status: 200\nMessage: OK",
          "type": "output"
        },
        {
          "name": "created_code",
          "description": "201 should map to Created",
          "input": "201\n",
          "expected": "Status: 201\nMessage: Created",
          "type": "output"
        },
        {
          "name": "bad_request_code",
          "description": "400 should map to Bad Request",
          "input": "400\n",
          "expected": "Status: 400\nMessage: Bad Request",
          "type": "output"
        },
        {
          "name": "not_found_code",
          "description": "404 should map to Not Found",
          "input": "404\n",
          "expected": "Status: 404\nMessage: Not Found",
          "type": "output"
        },
        {
          "name": "internal_error_code",
          "description": "500 should map to Internal Server Error",
          "input": "500\n",
          "expected": "Status: 500\nMessage: Internal Server Error",
          "type": "output"
        },
        {
          "name": "unknown_code",
          "description": "Any other code should map to Unknown Status",
          "input": "302\n",
          "expected": "Status: 302\nMessage: Unknown Status",
          "type": "output"
        }
      ],
      "hints": [
        "Read the code once with std::cin >> code; before printing anything.",
        "Echo the original code on the Status line before choosing the message.",
        "Remember to break after each case to prevent accidental fallthrough.",
        "Use default to handle every value that is not one of the listed cases."
      ]
    }
  ]
}
