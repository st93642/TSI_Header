{
  "id": "error_debug_c_exercise",
  "title": "Error Handling and Debugging in C",
  "description": "Implement a program that demonstrates error handling and debugging techniques in C. The program should read an operation and two numbers from stdin, perform the operation with error checking, and log the result or error.\n\nSteps:\n1. Define an enum for error codes (SUCCESS, INVALID_INPUT, DIVISION_BY_ZERO, INVALID_OPERATION).\n2. Define a LOG macro to print messages with levels.\n3. Implement safe_atoi function using strtol to validate integer inputs.\n4. Implement perform_operation function that checks for valid operators and errors, logs, and returns error codes.\n5. In main, read inputs using scanf, validate with safe_atoi, perform operation, handle errors, and print result.\n\nExpected output/results: For valid operations, log success and print result. For errors, log error and exit with code 1.",
  "tags": [
    "c",
    "error-handling",
    "debugging"
  ],
  "starterCode": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <assert.h>\n#include <string.h>\n\n// TODO: Define error codes enum\n// typedef enum {\n//     SUCCESS = 0,\n//     INVALID_INPUT,\n//     DIVISION_BY_ZERO\n// } ErrorCode;\n\n// TODO: Define LOG macro\n// #define LOG(level, msg) printf(\"[%s] %s\\n\", level, msg)\n\n// TODO: Implement safe input validation\n// int safe_atoi(const char *str, int *result) {\n//     // Use strtol to convert, check for errors\n// }\n\n// TODO: Implement operation function with error handling\n// ErrorCode perform_operation(char op, int a, int b, int *result) {\n//     // Check for division by zero, invalid op\n//     // Log the operation\n//     // Return appropriate error code\n// }\n\nint main(void) {\n    char op;\n    int a, b, res;\n    \n    // TODO: Read operation and numbers from stdin\n    // scanf(\"%c %d %d\", &op, &a, &b);\n    \n    // TODO: Validate inputs\n    // if (!safe_atoi(...)) { LOG(\"ERROR\", \"Invalid input\"); return 1; }\n    \n    // TODO: Perform operation\n    // ErrorCode err = perform_operation(op, a, b, &res);\n    // if (err != SUCCESS) {\n    //     LOG(\"ERROR\", \"Operation failed\");\n    //     return 1;\n    // }\n    \n    // TODO: Log success and print result\n    // LOG(\"INFO\", \"Operation successful\");\n    // printf(\"Result: %d\\n\", res);\n    \n    return 0;\n}",
  "tests": [
    {
      "name": "Addition operation",
      "type": "output",
      "input": "+ 5 3\n",
      "expected": "[INFO] Operation successful\nResult: 8\n"
    },
    {
      "name": "Division operation",
      "type": "output",
      "input": "/ 10 2\n",
      "expected": "[INFO] Operation successful\nResult: 5\n"
    },
    {
      "name": "Division by zero error",
      "type": "output",
      "input": "/ 10 0\n",
      "expected": "[ERROR] Operation failed\n"
    },
    {
      "name": "Invalid operation error",
      "type": "output",
      "input": "% 10 3\n",
      "expected": "[ERROR] Operation failed\n"
    }
  ],
  "hints": [
    "Define an enum for error codes like SUCCESS, INVALID_INPUT, DIVISION_BY_ZERO.",
    "Use a LOG macro to print messages with levels like INFO or ERROR.",
    "Implement safe_atoi using strtol to validate integer inputs.",
    "In perform_operation, check for valid operators (+, -, *, /) and division by zero.",
    "Use scanf to read inputs, but validate them with safe_atoi.",
    "Return error codes from functions and handle them in main."
  ]
}