{
  "exerciseId": "stdlib_c_exercise",
  "languageId": "c",
  "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <time.h>\n\nint process_rand(int min, int max) {\n    return min + rand() % (max - min + 1);\n}\n\ndouble process_sqrt(double num) {\n    return sqrt(num);\n}\n\nvoid process_upper(char *str) {\n    for (size_t i = 0; str[i]; i++) {\n        str[i] = toupper(str[i]);\n    }\n}\n\nvoid process_time(void) {\n    time_t now = time(NULL);\n    printf(\"Current time: %s\", ctime(&now));\n}\n\nvoid process_token(char *str, char *delim) {\n    char *token = strtok(str, delim);\n    while (token != NULL) {\n        printf(\"%s\\n\", token);\n        token = strtok(NULL, delim);\n    }\n}\n\nint main(void) {\n    char line[256];\n    srand(time(NULL));\n    \n    while (fgets(line, sizeof(line), stdin)) {\n        line[strcspn(line, \"\\n\")] = 0;\n        \n        char cmd[20];\n        if (sscanf(line, \"%s\", cmd) != 1) continue;\n        \n        if (strcmp(cmd, \"quit\") == 0) break;\n        \n        if (strcmp(cmd, \"rand\") == 0) {\n            int min, max;\n            if (sscanf(line, \"%*s %d %d\", &min, &max) == 2) {\n                int r = process_rand(min, max);\n                printf(\"%d\\n\", r);\n            } else {\n                printf(\"Error: invalid rand args\\n\");\n            }\n        } else if (strcmp(cmd, \"sqrt\") == 0) {\n            double num;\n            if (sscanf(line, \"%*s %lf\", &num) == 1) {\n                double r = process_sqrt(num);\n                printf(\"%.6f\\n\", r);\n            } else {\n                printf(\"Error: invalid sqrt arg\\n\");\n            }\n        } else if (strcmp(cmd, \"upper\") == 0) {\n            char str[256];\n            if (sscanf(line, \"%*s %255s\", str) == 1) {\n                process_upper(str);\n                printf(\"%s\\n\", str);\n            } else {\n                printf(\"Error: invalid upper arg\\n\");\n            }\n        } else if (strcmp(cmd, \"time\") == 0) {\n            process_time();\n        } else if (strcmp(cmd, \"token\") == 0) {\n            char str[256], delim[10];\n            if (sscanf(line, \"%*s %255s %9s\", str, delim) == 2) {\n                char *copy = strdup(str);\n                process_token(copy, delim);\n                free(copy);\n            } else {\n                printf(\"Error: invalid token args\\n\");\n            }\n        } else {\n            printf(\"Unknown command\\n\");\n        }\n    }\n    \n    return 0;\n}",
  "explanation": "This solution implements a command-line interface that uses various standard library functions. It seeds the random number generator once, then processes commands in a loop. Each command uses appropriate library functions: rand for random numbers, sqrt for square roots, toupper for case conversion, time/ctime for timestamps, and strtok for tokenization. Error handling is included for invalid inputs.",
  "keyPoints": [
    "Include all necessary headers at the top.",
    "Seed srand once with time(NULL).",
    "Use sscanf for parsing input with proper format specifiers.",
    "Handle string copying safely with strdup for strtok.",
    "Use appropriate data types (double for sqrt, int for rand).",
    "Free dynamically allocated memory."
  ]
}