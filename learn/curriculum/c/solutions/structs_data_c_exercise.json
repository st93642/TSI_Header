{
  "exerciseId": "structs_data_c_exercise",
  "languageId": "c",
  "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node *next;\n} Node;\n\nNode* create_node(int data)\n{\n    Node *n = malloc(sizeof(Node));\n    if (n) {\n        n->data = data;\n        n->next = NULL;\n    }\n    return n;\n}\n\nvoid append_node(Node **head, int data)\n{\n    Node *new_node = create_node(data);\n    if (!new_node) return;\n    if (*head == NULL) {\n        *head = new_node;\n        return;\n    }\n    Node *current = *head;\n    while (current->next) {\n        current = current->next;\n    }\n    current->next = new_node;\n}\n\nvoid print_list(Node *head)\n{\n    while (head) {\n        printf(\"%d \", head->data);\n        head = head->next;\n    }\n    printf(\"\\n\");\n}\n\nvoid free_list(Node *head)\n{\n    while (head) {\n        Node *temp = head;\n        head = head->next;\n        free(temp);\n    }\n}\n\nint main(void)\n{\n    int n;\n    if (scanf(\"%d\", &n) != 1 || n < 0)\n    {\n        return 1;\n    }\n\n    Node *head = NULL;\n\n    for (int i = 0; i < n; ++i)\n    {\n        int data;\n        if (scanf(\"%d\", &data) != 1)\n        {\n            free_list(head);\n            return 1;\n        }\n        append_node(&head, data);\n    }\n\n    print_list(head);\n    free_list(head);\n    return 0;\n}",
  "explanation": "The solution defines a Node struct with typedef. create_node allocates and initializes. append_node uses double pointer to add to end. print_list traverses and prints. free_list frees all nodes. Main reads n, appends n nodes, prints, frees.",
  "keyPoints": [
    "Use typedef for cleaner code.",
    "Double pointer for head modification.",
    "Traverse to end for append.",
    "Free all nodes to avoid leaks."
  ]
}