{
  "exerciseId": "loops_iteration_c_exercise",
  "languageId": "c",
  "code": "#include <stdio.h>\n\nstatic const int DAYS_PER_WEEK = 7;\n\nint main(void)\n{\n    int weeks = 0;\n\n    printf(\"Enter number of weeks (1-4):\\n\");\n    if (scanf(\"%d\", &weeks) != 1 || weeks < 1 || weeks > 4)\n    {\n        printf(\"Invalid number of weeks.\\n\");\n        return 1;\n    }\n\n    int topWeekIndex = 0;\n    int topWeekTotal = -1;\n    int overallMinutes = 0;\n\n    for (int week = 0; week < weeks; ++week)\n    {\n        int weekTotal = 0;\n        int weekPeakDay = 0;\n        int weekPeakMinutes = -1;\n\n        for (int day = 0; day < DAYS_PER_WEEK; ++day)\n        {\n            int minutes = 0;\n            printf(\"Enter minutes for week %d day %d:\\n\", week + 1, day + 1);\n\n            if (scanf(\"%d\", &minutes) != 1 || minutes < 0)\n            {\n                printf(\"Invalid minutes.\\n\");\n                return 1;\n            }\n\n            weekTotal += minutes;\n            overallMinutes += minutes;\n\n            if (minutes > weekPeakMinutes)\n            {\n                weekPeakMinutes = minutes;\n                weekPeakDay = day;\n            }\n        }\n\n        double weekAverage = weekTotal / 7.0;\n        printf(\"Week %d: total=%d avg=%.1f peak=Day %d\\n\", week + 1, weekTotal, weekAverage, weekPeakDay + 1);\n\n        if (weekTotal > topWeekTotal)\n        {\n            topWeekTotal = weekTotal;\n            topWeekIndex = week;\n        }\n    }\n\n    double overallAverage = overallMinutes / (weeks * 7.0);\n    printf(\"Top week: Week %d\\n\", topWeekIndex + 1);\n    printf(\"Overall average: %.1f\\n\", overallAverage);\n\n    return 0;\n}\n",
  "explanation": "The solution validates the outer `weeks` input before entering the nested loops, then accumulates totals while tracking the peak day index. Minutes are read inside the inner loop with immediate validation to prevent corrupt data. After each week, the programme prints the summary and updates the top-week tracker only when the total strictly increases so ties preserve the earliest week. Finally, it divides the combined minutes by weeks*7 to compute the overall average and prints the summary lines.",
  "keyPoints": [
    "Validate both the week count and each minutes entry, returning early on error to avoid partial summaries.",
    "Track the peak day with separate variables for the minute value and the index so ties can be handled correctly.",
    "Accumulate overall minutes in parallel with weekly totals to avoid iterating the data twice.",
    "Format averages with %.1f to match the specification while keeping integer totals exact.",
    "Update the best week only when the total strictly improves, preserving the earliest week on ties."
  ]
}