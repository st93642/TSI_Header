{
  "id": "error_handling_exercise",
  "title": "Exercise 6.3: Exception Handling Exercise",
  "description": "Practice safe division with error handling.",
  "difficulty": "intermediate",
  "starterCode": "# Create a safe_divide method that handles division by zero\n\ndef safe_divide(a, b)\n  # Return the result of a / b\n  # If b is zero, return \"Cannot divide by zero\"\n  # Use begin/rescue block\n\nend\n\ndef safe_divide_with_float(a, b)\n  # Same as safe_divide but return float result\n  # Use a.to_f / b to get float division\n\nend\n\ndef calculate_average(numbers)\n  # Calculate average of array\n  # Return \"Cannot calculate average of empty array\" if empty\n  # Use begin/rescue to handle empty array\n\nend\n",
  "tests": [
    {
      "name": "safe_divide normal case",
      "call": "safe_divide(10, 2)",
      "expected": 5
    },
    {
      "name": "safe_divide by zero",
      "call": "safe_divide(10, 0)",
      "expected": "Cannot divide by zero"
    },
    {
      "name": "safe_divide_with_float normal",
      "call": "safe_divide_with_float(10, 4)",
      "expected": 2.5
    },
    {
      "name": "safe_divide_with_float by zero",
      "call": "safe_divide_with_float(10, 0)",
      "expected": "Cannot divide by zero"
    },
    {
      "name": "calculate_average normal",
      "call": "calculate_average([10, 20, 30])",
      "expected": 20.0
    },
    {
      "name": "calculate_average empty array",
      "call": "calculate_average([])",
      "expected": "Cannot calculate average of empty array"
    }
  ],
  "hints": [
    "Use begin/rescue block: begin...rescue ZeroDivisionError...end",
    "Return error message string in rescue block",
    "For average: sum / numbers.length",
    "Check if array is empty: numbers.empty?",
    "Use .to_f for float division"
  ],
  "tags": ["exceptions", "error-handling", "begin", "rescue", "intermediate"]
}
