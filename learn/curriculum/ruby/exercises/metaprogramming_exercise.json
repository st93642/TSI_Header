{
  "id": "metaprogramming_exercise",
  "title": "Lesson 6.1: Metaprogramming Basics",
  "description": "Practice dynamic method calls using send.",
  "difficulty": "advanced",
  "starterCode": "# Create a Calculator class with basic methods\n\nclass Calculator\n  def add(a, b)\n    a + b\n  end\n  \n  def multiply(a, b)\n    a * b\n  end\n  \n  def subtract(a, b)\n    a - b\n  end\nend\n\n# Create a method that calls Calculator methods dynamically\ndef calculate(operation, a, b)\n  # Use send to call the operation method on a Calculator instance\n  # Return the result\n\nend\n",
  "tests": [
    {
      "name": "calculate with add",
      "call": "calculate('add', 5, 3)",
      "expected": 8
    },
    {
      "name": "calculate with multiply",
      "call": "calculate('multiply', 4, 3)",
      "expected": 12
    },
    {
      "name": "calculate with subtract",
      "call": "calculate('subtract', 10, 4)",
      "expected": 6
    },
    {
      "name": "calculate add different numbers",
      "call": "calculate('add', 100, 50)",
      "expected": 150
    }
  ],
  "hints": [
    "Create a Calculator instance inside calculate method",
    "Use send to call methods: obj.send(method_name, args)",
    "Convert string to symbol if needed: method_name.to_sym",
    "Return the result of the send call"
  ],
  "tags": ["metaprogramming", "send", "advanced"]
}
