{
  "id": "module_namespacing_exercise",
  "title": "Module Namespacing",
  "difficulty": "intermediate",
  "description": "Organize code using modules as namespaces to prevent conflicts and improve code structure\n\nSteps:\n1. Implement `test_game_engine` so `test_game_engine()` returns \"Player defeated Enemy with 100 damage\".\n2. Implement `test_filesystem` so `test_filesystem()` returns \"/home/user/documents/file.txt\".\n3. Implement `test_web_framework` so `test_web_framework()` returns \"GET /users -> UsersController#index\".\n4. Implement `test_mixin` so `test_mixin()` returns \"Validated and saved\".\n5. Implement `test_constants` so `test_constants()` returns \"1.0.0\".\n6. Implement `test_nested` so `test_nested()` returns \"Database connected to production\".\n\nExpected results:\n- `test_game_engine()` returns \"Player defeated Enemy with 100 damage\"\n- `test_filesystem()` returns \"/home/user/documents/file.txt\"\n- `test_web_framework()` returns \"GET /users -> UsersController#index\"\n- `test_mixin()` returns \"Validated and saved\"\n- `test_constants()` returns \"1.0.0\"\n- `test_nested()` returns \"Database connected to production\"",
  "tags": [
    "modules",
    "namespacing",
    "organization",
    "architecture",
    "intermediate"
  ],
  "starterCode": "# Create a well-organized module namespace structure\n# Use modules to group related classes and prevent naming conflicts\n# Implement both namespacing and mixin functionality\n\nmodule GameEngine\n  # Your module structure here\nend\n\nmodule FileSystem\n  # Your module structure here\nend\n\nmodule WebFramework\n  # Your module structure here\nend\n",
  "tests": [
    {
      "name": "test_game_engine_namespacing",
      "call": "test_game_engine()",
      "expected": "Player defeated Enemy with 100 damage"
    },
    {
      "name": "test_filesystem_operations",
      "call": "test_filesystem()",
      "expected": "/home/user/documents/file.txt"
    },
    {
      "name": "test_web_framework_routing",
      "call": "test_web_framework()",
      "expected": "GET /users -> UsersController#index"
    },
    {
      "name": "test_mixin_functionality",
      "call": "test_mixin()",
      "expected": "Validated and saved"
    },
    {
      "name": "test_constants_in_namespace",
      "call": "test_constants()",
      "expected": "1.0.0"
    },
    {
      "name": "test_nested_modules",
      "call": "test_nested()",
      "expected": "Database connected to production"
    }
  ],
  "hints": [
    "Use modules to group related classes and constants",
    "Access namespaced items with :: syntax",
    "Modules can contain both classes and other modules",
    "Use include/extend for mixin functionality within namespaces",
    "Constants in modules are accessed with Module::CONSTANT",
    "Organize code by domain or functionality"
  ]
}