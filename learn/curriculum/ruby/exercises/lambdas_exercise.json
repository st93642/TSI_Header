{
  "id": "lambdas_exercise",
  "title": "Lambdas in Ruby",
  "description": "Practice using lambdas and understanding closures.\n\nSteps:\n1. Implement `make_multiplier` so `make_multiplier(3).call(4)` returns 12.\n2. Implement `transform` so `transform([1,2,3], ->(x) { x * 2 })` returns [2, 4, 6].\n3. Implement `positive_checker.call` so `positive_checker.call(5)` returns true; `positive_checker.call(-3)` returns false.\n\nExpected results:\n- `make_multiplier(3).call(4)` returns 12\n- `transform([1,2,3], ->(x) { x * 2 })` returns [2, 4, 6]\n- `positive_checker.call(5)` returns true\n- `positive_checker.call(-3)` returns false",
  "difficulty": "advanced",
  "starterCode": "# Lambdas Exercise\n\n# 1. Create a method make_multiplier(n) that returns lambda multiplying by n\n#    Example: mult = make_multiplier(3); mult.call(4) => 12\n#    Example: mult = make_multiplier(5); mult.call(2) => 10\n#    Hint: ->(x) { x * n } or lambda { |x| x * n }\n\ndef make_multiplier(n)\n  # Return a lambda that multiplies its argument by n\n\nend\n\n# 2. Create a method transform(arr, operation) that applies lambda to each element\n#    Example: transform([1,2,3], ->(x) { x * 2 }) => [2, 4, 6]\n#    Example: transform([1,2,3], ->(x) { x + 10 }) => [11, 12, 13]\n#    Hint: arr.map { |x| operation.call(x) }\n\ndef transform(arr, operation)\n  # Apply the operation lambda to each array element\n\nend\n\n# 3. Create a method positive_checker that returns lambda checking if positive\n#    Example: checker = positive_checker; checker.call(5) => true\n#    Example: checker = positive_checker; checker.call(-3) => false\n#    Hint: ->(x) { x > 0 }\n\ndef positive_checker\n  # Return a lambda that returns true if number > 0\n\nend\n",
  "tests": [
    {
      "name": "make_multiplier creates lambda",
      "call": "make_multiplier(3).call(4)",
      "expected": 12
    },
    {
      "name": "transform applies lambda",
      "call": "transform([1,2,3], ->(x) { x * 2 })",
      "expected": [
        2,
        4,
        6
      ]
    },
    {
      "name": "positive_checker checks",
      "call": "positive_checker.call(5)",
      "expected": true
    },
    {
      "name": "positive_checker with negative",
      "call": "positive_checker.call(-3)",
      "expected": false
    }
  ],
  "hints": [
    "Lambda syntax: ->(params) { code }",
    "Or: lambda { |params| code }",
    "Lambdas are strict with arguments",
    "transform: arr.map { |x| operation.call(x) }",
    "Closures remember their environment"
  ],
  "tags": [
    "advanced"
  ]
}
