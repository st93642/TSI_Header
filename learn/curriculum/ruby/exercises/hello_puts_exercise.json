{
  "id": "hello_puts_exercise",
  "title": "Hello World with Puts",
  "description": "Learn to return values from methods and use string interpolation. Methods can return strings that combine text with variables using #{}.\n\nSteps:\n1. Implement `greet` so `greet('Alice')` returns \"Hello, Alice!\"; `greet('Bob')` returns \"Hello, Bob!\"; `greet('World')` returns \"Hello, World!\".\n\nExpected results:\n- `greet('Alice')` returns \"Hello, Alice!\"\n- `greet('Bob')` returns \"Hello, Bob!\"\n- `greet('World')` returns \"Hello, World!\"",
  "difficulty": "beginner",
  "starterCode": "# Task: Create a method called greet that takes a name parameter\n# and returns a greeting message using that name\n# Example: greet(\"Alice\") should return \"Hello, Alice!\"\n# Hint: Use string interpolation with #{name} to insert the variable\n\ndef greet(name)\n  # Your code here\n\nend\n",
  "tests": [
    {
      "name": "greet with Alice",
      "call": "greet('Alice')",
      "expected": "Hello, Alice!"
    },
    {
      "name": "greet with Bob",
      "call": "greet('Bob')",
      "expected": "Hello, Bob!"
    },
    {
      "name": "greet with your name",
      "call": "greet('World')",
      "expected": "Hello, World!"
    }
  ],
  "hints": [
    "Use string interpolation with #{} to insert the name into the greeting",
    "The method should RETURN a string, not print it with puts",
    "Ruby returns the last expression automatically - no 'return' keyword needed",
    "Format: \"Hello, #{name}!\"",
    "Don't forget the exclamation mark at the end"
  ],
  "tags": [
    "basics",
    "output",
    "beginner",
    "strings"
  ]
}