{
  "id": "enumerables_advanced_exercise",
  "title": "Advanced Enumerables",
  "description": "Master advanced Ruby enumerable methods including each_with_index, reduce, select, reject, map, group_by, sort_by, take, drop, chunk, partition, and zip. Practice method chaining for efficient data processing.",
  "difficulty": "intermediate",
  "starterCode": "# Your code here\n",
  "tags": ["enumerables", "advanced", "data_processing", "method_chaining"],
  "tests": [
    {
      "name": "test_each_with_index_squares",
      "call": "each_with_index_squares([1, 2, 3, 4, 5])",
      "expected": [1, 4, 9, 16, 25]
    },
    {
      "name": "test_reduce_sum_of_squares",
      "call": "reduce_sum_of_squares([1, 2, 3, 4])",
      "expected": 30
    },
    {
      "name": "test_select_even_numbers",
      "call": "select_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      "expected": [2, 4, 6, 8, 10]
    },
    {
      "name": "test_reject_short_words",
      "call": "reject_short_words(['cat', 'elephant', 'dog', 'hippopotamus', 'ant'])",
      "expected": ["elephant", "hippopotamus"]
    },
    {
      "name": "test_map_double_values",
      "call": "map_double_values([1, 2, 3, 4, 5])",
      "expected": [2, 4, 6, 8, 10]
    },
    {
      "name": "test_group_by_length",
      "call": "group_by_length(['cat', 'dog', 'elephant', 'ant', 'bird'])",
      "expected": {"3": ["cat", "dog", "ant"], "8": ["elephant"], "4": ["bird"]}
    },
    {
      "name": "test_sort_by_age",
      "call": "sort_by_age([{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 20}, {\"name\": \"Charlie\", \"age\": 30}])",
      "expected": [{"name": "Bob", "age": 20}, {"name": "Alice", "age": 25}, {"name": "Charlie", "age": 30}]
    },
    {
      "name": "test_take_top_scores",
      "call": "take_top_scores([{\"name\": \"Alice\", \"score\": 95}, {\"name\": \"Bob\", \"score\": 87}, {\"name\": \"Charlie\", \"score\": 92}], 2)",
      "expected": [{"name": "Alice", "score": 95}, {"name": "Charlie", "score": 92}]
    },
    {
      "name": "test_partition_even_odd",
      "call": "partition_even_odd([1, 2, 3, 4, 5, 6])",
      "expected": [[2, 4, 6], [1, 3, 5]]
    },
    {
      "name": "test_zip_names_ages",
      "call": "zip_names_ages(['Alice', 'Bob', 'Charlie'], [25, 30, 35])",
      "expected": [["Alice", 25], ["Bob", 30], ["Charlie", 35]]
    },
    {
      "name": "test_method_chaining",
      "call": "method_chaining([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      "expected": [16, 36, 64, 100]
    }
  ],
  "hints": [
    "Remember that each_with_index yields both the element and its index",
    "reduce/inject accumulates values using an accumulator and each element",
    "select returns elements that match the condition, reject returns those that don't",
    "map transforms each element and returns a new array with the results",
    "group_by creates a hash where keys are the grouping criteria and values are arrays of matching elements",
    "sort_by is more efficient than sort when you have an expensive key computation",
    "take(n) returns first n elements, drop(n) returns all except first n",
    "partition returns two arrays: [matching, non_matching]",
    "zip combines multiple arrays element-wise",
    "Method chaining allows you to combine multiple enumerable operations in sequence"
  ]
}