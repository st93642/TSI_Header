{
  "id": "time_date_exercise",
  "title": "Student Event Management System",
  "description": "Complete solution for the Student Event Management System demonstrating practical Time and Date usage",
  "solution": "# Student Event Management System - Complete Solution\n\nrequire 'date'\n\n# ===== PART 1: Current Time and Basic Operations =====\nnow = Time.now\ngraduation_time = Time.new(2025, 12, 15, 10, 0, 0)\n\n# ===== PART 2: Student Age Verification =====\n\ndef calculate_age(birth_year, birth_month, birth_day)\n  today = Date.today\n  birth_date = Date.new(birth_year, birth_month, birth_day)\n  \n  age = today.year - birth_date.year\n  # Subtract 1 if birthday hasn't happened yet this year\n  age -= 1 if today < Date.new(today.year, birth_date.month, birth_date.day)\n  \n  age\nend\n\ndef eligible_for_alumni_events?(birth_year, birth_month, birth_day)\n  calculate_age(birth_year, birth_month, birth_day) >= 21\nend\n\n# ===== PART 3: Event Scheduling and Countdown =====\n\ndef days_until_event(event_year, event_month, event_day)\n  today = Date.today\n  event_date = Date.new(event_year, event_month, event_day)\n  (event_date - today).to_i\nend\n\ndef format_event_announcement(time_obj)\n  time_obj.strftime('%A, %B %d, %Y at %I:%M %p')\nend\n\n# ===== PART 4: Study Session Scheduler =====\n\ndef next_study_session\n  # Add 3 days and set to 2 PM\n  base_time = Time.now + (3 * 24 * 60 * 60)  # Add 3 days\n  Time.new(base_time.year, base_time.month, base_time.day, 14, 0, 0)\nend\n\ndef during_study_hours?(time_obj)\n  hour = time_obj.hour\n  hour >= 9 && hour <= 20  # 9 AM to 8 PM\nend\n\n# ===== PART 5: Academic Calendar =====\n\ndef academic_year_start\n  today = Date.today\n  \n  if today.month >= 9\n    # We're past September, so academic year started this year\n    Date.new(today.year, 9, 1)\n  else\n    # We're before September, so academic year started last year\n    Date.new(today.year - 1, 9, 1)\n  end\nend\n\ndef weeks_into_semester\n  start_date = academic_year_start\n  today = Date.today\n  days_elapsed = (today - start_date).to_i\n  (days_elapsed / 7.0).floor\nend\n\n# ===== PART 6: International Student Time Zones =====\n\ndef event_time_in_utc(local_time)\n  local_time.utc\nend\n\n# ===== ADDITIONAL REAL-WORLD FUNCTIONALITY =====\n\n# Check if event is on a weekend\ndef weekend_event?(time_obj)\n  time_obj.saturday? || time_obj.sunday?\nend\n\n# Calculate study time between two times\ndef study_duration(start_time, end_time)\n  duration_seconds = end_time - start_time\n  hours = (duration_seconds / 3600).floor\n  minutes = ((duration_seconds % 3600) / 60).floor\n  \"#{hours} hours and #{minutes} minutes\"\nend\n\n# Generate weekly schedule\ndef generate_weekly_schedule(start_date)\n  schedule = {}\n  date = start_date.is_a?(Date) ? start_date : start_date.to_date\n  \n  7.times do |i|\n    current_date = date + i\n    day_name = current_date.strftime('%A')\n    \n    # Different events for different days\n    case day_name\n    when 'Monday', 'Wednesday', 'Friday'\n      schedule[day_name] = 'Programming Lab (9:00 AM - 12:00 PM)'\n    when 'Tuesday', 'Thursday'\n      schedule[day_name] = 'Theory Classes (10:00 AM - 3:00 PM)'\n    else\n      schedule[day_name] = 'Free day / Study time'\n    end\n  end\n  \n  schedule\nend\n\n# Check if it's exam period (last 2 weeks of semester)\ndef exam_period?\n  weeks = weeks_into_semester\n  weeks >= 14  # Assuming 16-week semester\nend\n\n# ===== DEMONSTRATION AND TESTING =====\n\nputs \"=== TSI Student Event Management System ===\"\nputs \"Current time: #{now}\"\nputs \"Graduation ceremony: #{format_event_announcement(graduation_time)}\"\nputs\n\n# Student examples\nstudent_ages = [\n  [2003, 5, 15, 'Alice'],\n  [2001, 12, 1, 'Bob'],\n  [2004, 8, 20, 'Charlie']\n]\n\nputs \"=== Student Age Verification ===\"\nstudent_ages.each do |year, month, day, name|\n  age = calculate_age(year, month, day)\n  eligible = eligible_for_alumni_events?(year, month, day)\n  puts \"#{name} (born #{month}/#{day}/#{year}): #{age} years old - Alumni events: #{eligible ? 'Eligible' : 'Not eligible'}\"\nend\nputs\n\n# Event countdown\nputs \"=== Upcoming Events ===\"\nevents = [\n  [2025, 12, 15, 'Winter Graduation'],\n  [2025, 11, 28, 'Thanksgiving Break'],\n  [2025, 12, 25, 'Christmas Day']\n]\n\nevents.each do |year, month, day, event_name|\n  days = days_until_event(year, month, day)\n  if days > 0\n    puts \"#{event_name}: #{days} days away\"\n  elsif days == 0\n    puts \"#{event_name}: TODAY!\"\n  else\n    puts \"#{event_name}: #{days.abs} days ago\"\n  end\nend\nputs\n\n# Study session info\nnext_session = next_study_session\nputs \"=== Study Schedule ===\"\nputs \"Next study session: #{format_event_announcement(next_session)}\"\nputs \"Currently during study hours: #{during_study_hours?(now) ? 'Yes' : 'No'}\"\nputs \"Weekend session: #{weekend_event?(next_session) ? 'Yes' : 'No'}\"\nputs\n\n# Academic calendar\nputs \"=== Academic Calendar ===\"\nputs \"Academic year started: #{academic_year_start}\"\nputs \"Weeks into semester: #{weeks_into_semester}\"\nputs \"Exam period: #{exam_period? ? 'Yes - study hard!' : 'No - regular classes'}\"\nputs\n\n# Time zones\nputs \"=== International Students ===\"\nputs \"Graduation (Local): #{graduation_time}\"\nputs \"Graduation (UTC): #{event_time_in_utc(graduation_time)}\"\nputs\n\n# Weekly schedule\nputs \"=== This Week's Schedule ===\"\nschedule = generate_weekly_schedule(Date.today)\nschedule.each do |day, activity|\n  puts \"#{day}: #{activity}\"\nend",
  "explanation": "This solution demonstrates practical time and date management in a student event system:\n\n**Age Verification**: Real-world age calculation considering whether birthday has passed this year, used for event eligibility.\n\n**Event Management**: Days countdown, professional announcement formatting, and scheduling functionality for academic events.\n\n**Academic Calendar**: Semester tracking based on September start dates, with automatic year calculation based on current date.\n\n**Study Scheduling**: Automated session scheduling with time validation and hour range checking for campus activities.\n\n**Time Zone Support**: UTC conversion for international students and online events.\n\n**Business Logic**: Weekend detection, duration calculation, and exam period identification based on semester progress.\n\nThis approach shows how time/date operations solve real problems in academic management systems.",
  "key_concepts": [
    "Time.now for current time",
    "Time.new() for specific times",
    "Time component access (.year, .month, .hour, etc.)",
    "Time arithmetic with + and - (in seconds)",
    "strftime() for time formatting",
    "Date class for calendar dates",
    "Converting between Time and Date",
    "Date arithmetic (days with +, months with >>)",
    "Practical time-based calculations"
  ]
}