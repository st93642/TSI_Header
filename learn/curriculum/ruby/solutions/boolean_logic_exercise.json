{
  "exerciseId": "boolean_logic_exercise",
  "languageId": "ruby",
  "code": "# TSI Student Portal Authentication System - Complete Solution\n\n# ===== PART 1: Basic Authentication Logic =====\n\ndef valid_login?(username, password, stored_username, stored_password)\n  # Both username AND password must match\n  username == stored_username && password == stored_password\nend\n\ndef account_active?(is_active, is_suspended, payment_current)\n  # Must be active AND not suspended AND payment current\n  is_active && !is_suspended && payment_current\nend\n\n# ===== PART 2: Permission System =====\n\ndef admin_access?(user_type, account_age_days)\n  # Admin or faculty always have access, or students with old accounts\n  user_type == 'admin' || user_type == 'faculty' || (user_type == 'student' && account_age_days > 365)\nend\n\ndef library_access?(is_student, is_faculty, library_fees_paid)\n  # Must be student or faculty AND have paid fees\n  (is_student || is_faculty) && library_fees_paid\nend\n\n# ===== PART 3: Security Validation =====\n\ndef strong_password?(password)\n  # Check length and that it contains both letters and numbers\n  return false if password.length < 8\n  \n  has_letter = password.match?(/[a-zA-Z]/)\n  has_number = password.match?(/[0-9]/)\n  \n  has_letter && has_number\nend\n\ndef suspicious_login?(failed_attempts, login_hour, is_weekend)\n  # Any of these conditions make it suspicious\n  failed_attempts >= 3 || login_hour < 6 || login_hour > 22 || is_weekend\nend\n\n# ===== PART 4: Course Enrollment Logic =====\n\ndef can_enroll?(prerequisite_completed, has_space, registration_open, tuition_paid)\n  # ALL conditions must be met\n  prerequisite_completed && has_space && registration_open && tuition_paid\nend\n\ndef scholarship_eligible?(gpa, financial_need, is_citizen, extracurricular_hours)\n  # GPA requirement AND (financial need OR citizenship) AND hour requirement\n  gpa >= 3.5 && (financial_need || is_citizen) && extracurricular_hours >= 50\nend\n\n# ===== PART 5: Ruby Truthiness Understanding =====\n\ndef truthy?(value)\n  # In Ruby, only false and nil are falsy\n  # Use double negation to convert to boolean\n  !!value\nend\n\ndef valid_input?(input)\n  # Check for nil, empty string, or whitespace-only string\n  return false if input.nil?\n  return false if input.is_a?(String) && input.strip.empty?\n  true\nend\n\nputs \"=== TSI Student Portal Authentication Complete ===\"",
  "explanation": "This solution demonstrates real-world applications of boolean logic in authentication systems. Each method shows practical use of boolean operators for security, permissions, and validation in a student portal.",
  "keyPoints": [
    "Boolean logic powers authentication and security systems",
    "AND (&&) requires ALL conditions to be true",
    "OR (||) allows ANY condition to be true",
    "Ruby truthiness: only false and nil are falsy"
  ]
}