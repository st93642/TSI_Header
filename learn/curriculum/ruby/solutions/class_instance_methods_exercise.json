{
  "exerciseId": "class_instance_methods_exercise",
  "languageId": "ruby",
  "code": "# Class vs Instance Methods Exercise - Solution\n\nclass Calculator\n  # Class method - utility function\n  def self.add(a, b)\n    a + b\n  end\n  \n  def initialize\n    @memory = 0\n  end\n  \n  # Instance method - operates on specific calculator\n  def add_to_memory(value)\n    @memory += value\n  end\n  \n  # Instance method - returns instance-specific data\n  def memory\n    @memory\n  end\nend\n\nclass BankAccount\n  @@total_accounts = 0\n  \n  def initialize(owner, balance = 0)\n    @owner = owner\n    @balance = balance\n    @@total_accounts += 1\n  end\n  \n  # Class method - factory pattern\n  def self.create_savings(owner)\n    new(owner, 100)  # Start with $100 bonus\n  end\n  \n  # Class method - access class data\n  def self.total_accounts\n    @@total_accounts\n  end\n  \n  # Instance method - deposit money\n  def deposit(amount)\n    @balance += amount\n  end\n  \n  # Instance method - get balance\n  def balance\n    @balance\n  end\nend\n\nclass Library\n  @@books = []\n  \n  def initialize\n    @borrowed_books = []\n  end\n  \n  # Class method - add book to library collection\n  def self.add_book(title, author)\n    @@books << \"#{title} by #{author}\"\n  end\n  \n  # Class method - find a book\n  def self.find_book(title)\n    @@books.find { |book| book.start_with?(title) }\n  end\n  \n  # Instance method - borrow a book\n  def borrow_book(title)\n    book = self.class.find_book(title)\n    if book\n      @borrowed_books << book\n      book\n    else\n      nil\n    end\n  end\n  \n  # Instance method - return borrowed books\n  def borrowed_books\n    @borrowed_books\n  end\nend\n\n# Test helper methods\ndef test_calculator_class\n  Calculator.add(10, 5)\nend\n\ndef test_calculator_instance\n  calc = Calculator.new\n  calc.add_to_memory(5)\n  calc.add_to_memory(3)\n  calc.memory\nend\n\ndef test_bank_account_class\n  account1 = BankAccount.new(\"Alice\")\n  account2 = BankAccount.create_savings(\"Bob\")\n  BankAccount.total_accounts\nend\n\ndef test_bank_account_instance\n  account = BankAccount.create_savings(\"Alice\")\n  account.deposit(50)\n  account.balance\nend\n\ndef test_library_class\n  Library.add_book(\"1984\", \"George Orwell\")\n  Library.find_book(\"1984\")\nend\n\ndef test_library_instance\n  Library.add_book(\"1984\", \"George Orwell\")\n  Library.add_book(\"To Kill a Mockingbird\", \"Harper Lee\")\n  \n  user = Library.new\n  user.borrow_book(\"1984\")\n  user.borrow_book(\"To Kill a Mockingbird\")\n  user.borrowed_books\nend",
  "explanation": "This solution demonstrates the key differences between class and instance methods:\n\n**Class Methods** (defined with `self.` or `class << self`):\n- Called directly on the class: `Calculator.add(10, 5)`\n- Can access class variables (@@variable) but not instance variables (@variable)\n- Used for factory patterns, utilities, and class-level operations\n- Cannot be called on instances\n\n**Instance Methods** (defined normally):\n- Called on object instances: `calc.add_to_memory(5)`\n- Can access both instance variables (@variable) and class variables (@@variable)\n- Operate on specific object state\n- Cannot be called directly on the class\n\n**Key Patterns**:\n- Factory methods: `BankAccount.create_savings()` creates instances with special initialization\n- Utility methods: `Calculator.add()` performs calculations without needing state\n- Class data access: `BankAccount.total_accounts` tracks class-level information\n- Instance operations: `account.deposit()` modifies specific account state",
  "keyPoints": [
    "Class methods use self.method_name or class << self syntax",
    "Instance methods are defined normally and work on object instances",
    "Class methods access class variables (@@) but not instance variables (@)",
    "Instance methods can access both class and instance variables",
    "Use class methods for factories, utilities, and class-level operations",
    "Use instance methods for object-specific operations and state",
    "Class methods are inherited by subclasses",
    "Instance methods operate on individual object state"
  ]
}