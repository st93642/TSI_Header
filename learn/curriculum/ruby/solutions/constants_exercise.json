{
  "exerciseId": "constants_exercise",
  "languageId": "ruby",
  "code": "# E-Commerce Application Constants - Complete Solution\n\n# ===== PART 1: Application Identity Constants =====\nSTORE_NAME = \"TSI Market\"\nSTORE_VERSION = \"2.1.0\"\nSTORE_MOTTO = \"Quality Tech for Students\"\n\n# ===== PART 2: Business Configuration Constants =====\nFREE_SHIPPING_THRESHOLD = 50\nMAX_CART_ITEMS = 20\nDISCOUNT_CODE = \"STUDENT25\"\n\n# ===== PART 3: Mathematical Constants for Calculations =====\nTAX_RATE = 0.08  # 8% sales tax\nSHIPPING_RATE = 5.99\n\n# ===== PART 4: Security Constants =====\nMIN_PASSWORD_LENGTH = 8\nMAX_LOGIN_ATTEMPTS = 3\nSESSION_TIMEOUT = 1800  # 30 minutes in seconds\n\n# ===== PART 5: Business Logic Methods =====\n\n# Calculate total cost including tax\ndef calculate_total(subtotal)\n  subtotal + (subtotal * TAX_RATE)\nend\n\n# Check if order qualifies for free shipping\ndef free_shipping?(order_total)\n  order_total >= FREE_SHIPPING_THRESHOLD\nend\n\n# Validate password meets minimum requirements\ndef valid_password?(password)\n  password.length >= MIN_PASSWORD_LENGTH\nend\n\n# Apply student discount (25% off)\ndef apply_student_discount(price)\n  price * 0.75  # Keep 75% of original price\nend\n\n# ===== PART 6: Configuration Module =====\nmodule Database\n  HOST = \"localhost\"\n  PORT = 5432\n  NAME = \"tsi_market_production\"\n  \n  def self.connection_string\n    \"#{HOST}:#{PORT}/#{NAME}\"\n  end\nend\n\n# ===== ADDITIONAL REAL-WORLD EXAMPLES =====\n\n# Payment processing constants\nmodule Payment\n  STRIPE_API_VERSION = \"2023-10-16\"\n  MAX_CHARGE_AMOUNT = 999999  # $9,999.99 in cents\n  CURRENCY = \"USD\"\nend\n\n# Product category constants\nmodule Categories\n  ELECTRONICS = \"electronics\"\n  BOOKS = \"books\"\n  CLOTHING = \"clothing\"\n  SOFTWARE = \"software\"\nend\n\n# Demonstration of real-world usage\nputs \"=== #{STORE_NAME} Configuration ===\"\nputs \"Version: #{STORE_VERSION}\"\nputs \"Motto: #{STORE_MOTTO}\"\nputs \"Free shipping on orders over: $#{FREE_SHIPPING_THRESHOLD}\"\nputs \"Tax rate: #{(TAX_RATE * 100).to_i}%\"\n\n# Example order calculation\norder_subtotal = 89.99\norder_total = calculate_total(order_subtotal)\nputs \"\\n=== Order Example ===\"\nputs \"Subtotal: $#{order_subtotal}\"\nputs \"Tax: $#{(order_subtotal * TAX_RATE).round(2)}\"\nputs \"Total: $#{order_total.round(2)}\"\nputs \"Free shipping: #{free_shipping?(order_total) ? 'Yes' : 'No'}\"\n\n# Student discount example\nregular_price = 199.99\nstudent_price = apply_student_discount(regular_price)\nputs \"\\n=== Student Discount ===\"\nputs \"Regular price: $#{regular_price}\"\nputs \"Student price: $#{student_price.round(2)}\"\nputs \"Savings: $#{(regular_price - student_price).round(2)}\"\n\n# Security validation\ntest_passwords = ['weak', 'strongpassword123', '12345', 'secureP@ssw0rd!']\nputs \"\\n=== Password Validation ===\"\ntest_passwords.each do |pwd|\n  status = valid_password?(pwd) ? 'VALID' : 'INVALID'\n  puts \"'#{pwd}' (#{pwd.length} chars): #{status}\"\nend\n\nputs \"\\n=== Database Configuration ===\"\nputs \"Connection: #{Database.connection_string}\"\nputs \"Host: #{Database::HOST}\"\nputs \"Port: #{Database::PORT}\"",
  "explanation": "This solution demonstrates real-world constant usage in an e-commerce application:\n\n**Application Identity**: STORE_NAME, STORE_VERSION, and STORE_MOTTO provide consistent branding across the application.\n\n**Business Rules**: FREE_SHIPPING_THRESHOLD, MAX_CART_ITEMS, and DISCOUNT_CODE define business logic that can be easily updated.\n\n**Mathematical Constants**: TAX_RATE and SHIPPING_RATE are used in financial calculations throughout the application.\n\n**Security Configuration**: MIN_PASSWORD_LENGTH, MAX_LOGIN_ATTEMPTS, and SESSION_TIMEOUT define security policies.\n\n**Modular Organization**: The Database module groups related configuration constants, making them easy to find and update.\n\n**Real-World Methods**: Each method demonstrates practical use of constants in business logic, from tax calculations to validation rules.\n\nThis approach makes the application highly configurable and maintainable - changing business rules only requires updating constants in one place.",
  "keyPoints": [
    "Use ALL_CAPS naming convention for constants",
    "Constants should hold values that don't change during execution",
    "Group related constants in modules for better organization",
    "Use constants instead of magic numbers in calculations",
    "Constants can be accessed from anywhere in the program",
    "Ruby warns (but allows) when you reassign constants"
  ]
}