{
  "id": "quadratic_curves_computational",
  "title": "Computational Methods for Quadratic Curves",
  "description": [
    "## Computational Methods for Quadratic Curves",
    "",
    "This exercise covers numerical algorithms, computational techniques, and implementation methods for working with quadratic curves in computer applications.",
    "",
    "### Exercise 1: Conic Fitting Algorithms",
    "",
    "**a)** Implement least squares conic fitting to point data.",
    "",
    "**b)** Use total least squares for noisy data.",
    "",
    "**c)** Apply RANSAC for robust conic fitting.",
    "",
    "**d)** Implement Bookstein's algorithm.",
    "",
    "**e)** Compare accuracy of different fitting methods.",
    "",
    "### Exercise 2: Eigenvalue Methods",
    "",
    "**a)** Find principal axes using eigenvalue decomposition.",
    "",
    "**b)** Diagonalize quadratic form matrix.",
    "",
    "**c)** Compute rotation angle from eigenvectors.",
    "",
    "**d)** Find canonical form numerically.",
    "",
    "**e)** Handle degenerate cases computationally.",
    "",
    "### Exercise 3: Numerical Classification",
    "",
    "**a)** Implement discriminant-based classification.",
    "",
    "**b)** Use invariant computation for recognition.",
    "",
    "**c)** Apply matrix methods numerically.",
    "",
    "**d)** Handle floating-point precision issues.",
    "",
    "**e)** Classify conics with numerical stability.",
    "",
    "### Exercise 4: Intersection Algorithms",
    "",
    "**a)** Find intersection of conic with line.",
    "",
    "**b)** Compute conic-conic intersection points.",
    "",
    "**c)** Handle tangent cases numerically.",
    "",
    "**d)** Find intersection with quadratic curves.",
    "",
    "**e)** Implement robust intersection algorithms.",
    "",
    "### Exercise 5: Geometric Computations",
    "",
    "**a)** Compute foci and directrices numerically.",
    "",
    "**b)** Find vertices and axes lengths.",
    "",
    "**c)** Calculate eccentricity computationally.",
    "",
    "**d)** Determine center and symmetry.",
    "",
    "**e)** Find asymptotes of hyperbolas.",
    "",
    "### Exercise 6: Curve Tracing",
    "",
    "**a)** Implement parametric curve generation.",
    "",
    "**b)** Create adaptive sampling algorithms.",
    "",
    "**c)** Handle singularities in tracing.",
    "",
    "**d)** Generate smooth curve approximations.",
    "",
    "**e)** Implement real-time curve rendering.",
    "",
    "### Exercise 7: Optimization Methods",
    "",
    "**a)** Minimize distance to conic curve.",
    "",
    "**b)** Find closest point on conic.",
    "",
    "**c)** Optimize conic parameters.",
    "",
    "**d)** Solve constrained optimization problems.",
    "",
    "**e)** Implement gradient-based methods.",
    "",
    "### Exercise 8: Matrix Decompositions",
    "",
    "**a)** Use SVD for conic analysis.",
    "",
    "**b)** Apply QR decomposition methods.",
    "",
    "**c)** Implement Cholesky for positive definite forms.",
    "",
    "**d)** Use LU decomposition for solving.",
    "",
    "**e)** Handle rank-deficient matrices.",
    "",
    "### Exercise 9: Numerical Stability",
    "",
    "**a)** Analyze condition numbers of conic problems.",
    "",
    "**b)** Implement stable algorithms for ill-conditioned cases.",
    "",
    "**c)** Use regularization techniques.",
    "",
    "**d)** Handle near-degenerate conics.",
    "",
    "**e)** Implement error bounds and estimates.",
    "",
    "### Exercise 10: Parallel Algorithms",
    "",
    "**a)** Implement GPU-based conic fitting.",
    "",
    "**b)** Use SIMD instructions for vector operations.",
    "",
    "**c)** Parallelize intersection computations.",
    "",
    "**d)** Implement distributed conic optimization.",
    "",
    "**e)** Use MapReduce for large datasets.",
    "",
    "### Exercise 11: Computer Vision Applications",
    "",
    "**a)** Detect conics in images using Hough transform.",
    "",
    "**b)** Implement ellipse detection algorithms.",
    "",
    "**c)** Find conic tracking in video sequences.",
    "",
    "**d)** Apply to camera calibration.",
    "",
    "**e)** Implement structure from motion with conics.",
    "",
    "### Exercise 12: CAD/CAM Applications",
    "",
    "**a)** Generate conic spline approximations.",
    "",
    "**b)** Implement conic offsetting algorithms.",
    "",
    "**c)** Create toolpath generation for conics.",
    "",
    "**d)** Apply to surface modeling.",
    "",
    "**e)** Implement conic blending operations.",
    "",
    "### Exercise 13: Scientific Computing",
    "",
    "**a)** Solve orbital mechanics problems numerically.",
    "",
    "**b)** Implement physics simulations with conics.",
    "",
    "**c)** Apply to electromagnetic field computations.",
    "",
    "**d)** Use conics in fluid dynamics.",
    "",
    "**e)** Implement quantum mechanical calculations.",
    "",
    "### Exercise 14: Data Analysis Methods",
    "",
    "**a)** Apply principal component analysis to conic data.",
    "",
    "**b)** Use clustering algorithms for conic classification.",
    "",
    "**c)** Implement statistical fitting methods.",
    "",
    "**d)** Apply machine learning to conic recognition.",
    "",
    "**e)** Use Bayesian methods for conic estimation.",
    "",
    "### Exercise 15: Advanced Implementations",
    "",
    "**a)** Implement arbitrary precision arithmetic for conics.",
    "",
    "**b)** Use symbolic computation libraries.",
    "",
    "**c)** Apply interval arithmetic for guaranteed bounds.",
    "",
    "**d)** Implement real-time conic processing.",
    "",
    "**e)** Create web-based conic visualization tools."
  ],
  "difficulty": "intermediate",
  "hints": [
    "Fitting: Use homogeneous coordinates, constraint AᵀCA = 0",
    "Eigenvalue: Matrix form $\\begin{pmatrix} a & b/2 \\\\ b/2 & c \\end{pmatrix}$",
    "Classification: Check discriminant Δ = b² - 4ac with tolerance",
    "Intersection: Solve quadratic equation for line parameters",
    "Stability: Use pivoting, scaling, regularization",
    "GPU: CUDA kernels for matrix operations, parallel reduction"
  ],
  "solution": [
    "## Solutions to Computational Quadratic Curves Exercises",
    "",
    "### Exercise 1: Conic Fitting Algorithms",
    "",
    "**a)** Minimize $\\sum (ax_i² + b x_i y_i + c y_i² + d x_i + e y_i + f)^2$",
    "",
    "**b)** TLS: minimize $\\sum ||(x_i, y_i, 1) · p - 0||^2 + ||p||^2$",
    "",
    "**c)** RANSAC: random 5-point samples, consensus set, refit",
    "",
    "**d)** Bookstein: normalize points, fit, denormalize",
    "",
    "**e)** Compare RMSE, robustness to outliers, computational cost",
    "",
    "### Exercise 2: Eigenvalue Methods",
    "",
    "**a)** Eigenvectors give principal directions, eigenvalues give axis lengths",
    "",
    "**b)** Diagonalize Q = $\\begin{pmatrix} a & b/2 \\\\ b/2 & c \\end{pmatrix}$",
    "",
    "**c)** θ = atan2(2b, a-c)/2 for rotation angle",
    "",
    "**d)** Canonical: rotate, translate to center form",
    "",
    "**e)** Check eigenvalues for zero/negative values",
    "",
    "### Exercise 3: Numerical Classification",
    "",
    "**a)** Δ = b² - 4ac: >0 hyperbola, =0 parabola, <0 ellipse",
    "",
    "**b)** I = a+c, II = ac - b²/4, III = determinant",
    "",
    "**c)** Sylvester: check positive definiteness of submatrices",
    "",
    "**d)** Use ε-tolerance for floating point comparisons",
    "",
    "**e)** Scale matrix to improve conditioning",
    "",
    "### Exercise 4: Intersection Algorithms",
    "",
    "**a)** Substitute line equation y = mx + k into conic",
    "",
    "**b)** Resultant elimination or eigenvalue method",
    "",
    "**c)** Check discriminant for tangent (double root)",
    "",
    "**d)** Use polynomial root finding algorithms",
    "",
    "**e)** Handle vertical lines, infinite intersections",
    "",
    "### Exercise 5: Geometric Computations",
    "",
    "**a)** Foci: solve for points where sum of distances is constant",
    "",
    "**b)** Vertices: extreme points in principal directions",
    "",
    "**c)** e = √(1 - b²/a²) for ellipse, e = √(1 + b²/a²) for hyperbola",
    "",
    "**d)** Center: (-d/2a, -e/2c) for centered conics",
    "",
    "**e)** Asymptotes: lines y = ±(b/a)x for hyperbola",
    "",
    "### Exercise 6: Curve Tracing",
    "",
    "**a)** Use rational parametrization for exact representation",
    "",
    "**b)** Adaptive: denser sampling near high curvature",
    "",
    "**c)** Handle cusps, self-intersections with limit analysis",
    "",
    "**d)** Cubic spline interpolation of sampled points",
    "",
    "**e)** Real-time: precompute lookup tables, GPU rendering",
    "",
    "### Exercise 7: Optimization Methods",
    "",
    "**a)** Solve nonlinear least squares for closest point",
    "",
    "**b)** Newton-Raphson iteration for distance minimization",
    "",
    "**c)** Levenberg-Marquardt for parameter optimization",
    "",
    "**d)** Quadratic programming with conic constraints",
    "",
    "**e)** Gradient descent with line search",
    "",
    "### Exercise 8: Matrix Decompositions",
    "",
    "**a)** SVD: U Σ Vᵀ gives principal components",
    "",
    "**b)** QR: orthogonal-triangular decomposition",
    "",
    "**c)** Cholesky: L Lᵀ for positive definite quadratic forms",
    "",
    "**d)** LU: lower-upper triangular factorization",
    "",
    "**e)** Use pseudoinverse for rank-deficient cases",
    "",
    "### Exercise 9: Numerical Stability",
    "",
    "**a)** κ = ||A|| ||A⁻¹|| for condition number",
    "",
    "**b)** Use SVD with threshold for rank determination",
    "",
    "**c)** Tikhonov regularization: minimize ||Ax - b||² + λ||x||²",
    "",
    "**d)** Perturb near-zero eigenvalues",
    "",
    "**e)** Interval arithmetic for guaranteed error bounds",
    "",
    "### Exercise 10: Parallel Algorithms",
    "",
    "**a)** CUDA: parallel evaluation of fitting objective",
    "",
    "**b)** SIMD: vectorized matrix-vector operations",
    "",
    "**c)** GPU: parallel root finding for intersections",
    "",
    "**d)** MPI: distributed consensus optimization",
    "",
    "**e)** Hadoop: map intersection computations, reduce results",
    "",
    "### Exercise 11: Computer Vision Applications",
    "",
    "**a)** Accumulate votes in parameter space (a,b,c,d,e,f)",
    "",
    "**b)** Edge detection + ellipse-specific constraints",
    "",
    "**c)** Kalman filter for conic parameter tracking",
    "",
    "**d)** Absolute conic constraint for calibration",
    "",
    "**e)** Epipolar geometry with conic correspondences",
    "",
    "### Exercise 12: CAD/CAM Applications",
    "",
    "**a)** Approximate with rational quadratic B-splines",
    "",
    "**b)** Offset curve: parallel curve at constant distance",
    "",
    "**c)** G-code generation for CNC machining",
    "",
    "**d)** NURBS surface fitting with conic cross-sections",
    "",
    "**e)** Boolean operations on conic regions",
    "",
    "### Exercise 13: Scientific Computing",
    "",
    "**a)** Runge-Kutta integration of orbital equations",
    "",
    "**b)** Finite element methods with conic elements",
    "",
    "**c)** Boundary element methods for field problems",
    "",
    "**d)** CFD: conic streamlines in flow visualization",
    "",
    "**e)** Schrödinger equation solutions in conic potentials",
    "",
    "### Exercise 14: Data Analysis Methods",
    "",
    "**a)** PCA: find principal quadratic variations",
    "",
    "**b)** K-means clustering in conic parameter space",
    "",
    "**d)** Neural networks for conic classification",
    "",
    "**e)** MCMC sampling for Bayesian conic estimation",
    "",
    "### Exercise 15: Advanced Implementations",
    "",
    "**a)** GMP/MPFR libraries for high precision arithmetic",
    "",
    "**b)** Mathematica/MATLAB symbolic conic manipulation",
    "",
    "**c)** INTLAB for interval conic computations",
    "",
    "**d)** WebGL shaders for real-time conic rendering",
    "",
    "**e)** D3.js interactive conic visualization and analysis"
  ],
  "workbook": "Computational Geometry Algorithms",
  "tags": [
    "mathematics",
    "computational mathematics",
    "algorithms",
    "numerical methods",
    "computer vision",
    "optimization"
  ],
  "lessonId": "quadratic_curves_computational"
}